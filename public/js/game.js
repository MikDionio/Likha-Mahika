//Classes

//Gestures
var gest = new gestures({
	debug: false,
	draw: true,
	drawColor: "#000000",
	drawWidth: 5,
	autoTrack: true,
	allowRotation: false,
	inverseShape: false,
	points: 33
})
//2nd
gest.addGesture("A", [
    {x: 68.04109191894531, y: 244.3925018310547},
    {x: 89.73035788903383, y: 240.22671508789062},
    {x: 107.92352918286268, y: 244.3925018310547},
    {x: 123.57776320597634, y: 252.72406005859375},
    {x: 134.97663549858575, y: 267.99859619140625},
    {x: 140.2479705810547, y: 286.71305112494025},
    {x: 141.63656616210938, y: 307.6834135808785},
    {x: 138.859375, y: 328.07859644526707},
    {x: 134.69358825683594, y: 346.27176773909594},
    {x: 134.69358825683594, y: 365.8535346139795},
    {x: 144.41375732421875, y: 379.3057395730946},
    {x: 158.80948936844916, y: 391.58343505859375},
    {x: 174.84490536232627, y: 401.9859696837106},
    {x: 191.0970964092423, y: 414.66069867836575},
    {x: 204.23158437760372, y: 429.0754699707031},
    {x: 216.62062072753906, y: 442.2990600850062},
    {x: 229.55007559188607, y: 458.2359313964844},
    {x: 240.80074514288617, y: 471.3073127299977},
    {x: 256.88983154296875, y: 479.6811893436959},
    {x: 275.9375966016573, y: 484.6192321777344},
    {x: 292.0022905005641, y: 477.27863254448823},
    {x: 301.1775156435273, y: 461.160436016629},
    {x: 308.267822265625, y: 444.17864052020275},
    {x: 315.2107849121094, y: 427.1358042122332},
    {x: 318.07095087239867, y: 406.7749945696445},
    {x: 319.3765563964844, y: 384.95682764367166},
    {x: 316.599365234375, y: 365.3750607687881},
    {x: 316.599365234375, y: 343.0161027317952},
    {x: 322.15374755859375, y: 326.211527019021},
    {x: 333.26251220703125, y: 313.33449271324173},
    {x: 347.20241825306624, y: 304.1020202636719},
    {x: 366.5887451171875, y: 299.5025571118495},
    {x: 383.2518615722656, y: 292.9932861328125},
], updateCurrentStrokes)

gest.addGesture("A2", [
    {x: 193.0145263671875, y: 326.31951904296875},
    {x: 189.25417814585649, y: 326.31951904296875},
    {x: 185.49382992452547, y: 326.31951904296875},
    {x: 181.73348170319446, y: 326.31951904296875},
    {x: 177.97313348186344, y: 326.31951904296875},
    {x: 174.21278526053243, y: 326.31951904296875},
    {x: 170.4524370392014, y: 326.31951904296875},
    {x: 166.6920888178704, y: 326.31951904296875},
    {x: 162.93174059653938, y: 326.31951904296875},
    {x: 159.17139237520837, y: 326.31951904296875},
    {x: 155.41104415387736, y: 326.31951904296875},
    {x: 151.97129834350363, y: 325.5455103401178},
    {x: 148.4989063381988, y: 324.85031713624016},
    {x: 145.28032815540558, y: 323.5423583984375},
    {x: 141.51997993407457, y: 323.5423583984375},
    {x: 138.33481762469063, y: 322.15374755859375},
    {x: 134.57446940335961, y: 322.15374755859375},
    {x: 130.8141211820286, y: 322.15374755859375},
    {x: 127.0537729606976, y: 322.15374755859375},
    {x: 123.2934247393666, y: 322.15374755859375},
    {x: 119.5330765180356, y: 322.15374755859375},
    {x: 115.7727282967046, y: 322.15374755859375},
    {x: 112.0123800753736, y: 322.15374755859375},
    {x: 108.82719618680322, y: 320.7651672363281},
    {x: 105.06684796547222, y: 320.7651672363281},
    {x: 101.30649974414122, y: 320.7651672363281},
    {x: 97.54615152281022, y: 320.7651672363281},
    {x: 93.78580330147922, y: 320.7651672363281},
    {x: 90.02545508014822, y: 320.7651672363281},
    {x: 86.26510685881722, y: 320.7651672363281},
    {x: 82.50475863748622, y: 320.7651672363281},
    {x: 78.74441041615522, y: 320.7651672363281},
    {x: 74.98406219482422, y: 320.7651672363281},
], updateCurrentStrokes)

gest.addGesture("A3", [
    {x: 205.51187133789062, y: 383.2518615722656},
 {x: 202.14854077966953, y: 383.6722830893336},
 {x: 198.78521022144844, y: 384.0927046064015},
 {x: 195.42187966322732, y: 384.5131261234695},
 {x: 192.04030267738, y: 384.6404724121094},
 {x: 188.73221232293898, y: 385.1421796126073},
 {x: 185.48662514139107, y: 386.029052734375},
 {x: 182.0971197651042, y: 386.029052734375},
 {x: 178.803106034792, y: 386.80473112451637},
 {x: 175.48905709668526, y: 387.41766357421875},
 {x: 172.09955172039838, y: 387.41766357421875},
 {x: 168.93037071395847, y: 388.3509817551665},
 {x: 165.71914599419586, y: 389.3814244048646},
 {x: 162.43047285744143, y: 390.2018539753797},
 {x: 159.10678826152778, y: 390.8665850509012},
 {x: 155.78310366561414, y: 391.5313161264227},
 {x: 152.4920243731193, y: 392.3410473185542},
 {x: 149.2037201393301, y: 393.1631190683742},
 {x: 145.91541957625788, y: 393.985205501042},
 {x: 142.62711641472563, y: 394.80728153988406},
 {x: 139.33881106919833, y: 395.6293488427578},
 {x: 135.96406069278277, y: 395.74920654296875},
 {x: 132.61203996804738, y: 395.98019416316527},
 {x: 129.3964775402514, y: 397.05206401012634},
 {x: 126.11399212943905, y: 397.8941173763488},
 {x: 122.80232329251994, y: 398.5263977050781},
 {x: 119.41281791623307, y: 398.5263977050781},
 {x: 116.08861726118815, y: 398.8030302246198},
 {x: 112.96161693801194, y: 399.9150085449219},
 {x: 110.14727589448569, y: 401.3035888671875},
 {x: 108.14638135804256, y: 402.69219970703125},
 {x: 106.14545630402131, y: 404.0807800292969},
 {x: 104.14453125, y: 405.4693603515625},
], updateCurrentStrokes)

gest.addGesture("Ba", [
    {x: 265.2214050292969, y: 304.1020202636719},
     {x: 241.12300273135352, y: 317.98797607421875},
     {x: 212.46462356518302, y: 329.786124568675},
     {x: 188.19962704270174, y: 341.9186226623555},
     {x: 159.87704773977342, y: 354.0914001464844},
     {x: 133.38330473050698, y: 363.7332427608961},
     {x: 106.92171478271484, y: 372.68557022230095},
     {x: 83.50858462380559, y: 384.6404724121094},
     {x: 69.4296875, y: 404.30277789258713},
     {x: 61.09812545776367, y: 430.52583444413915},
     {x: 72.20687866210938, y: 453.9716998335818},
     {x: 98.56972205160241, y: 463.7903137207031},
     {x: 128.38338324906871, y: 469.3446960449219},
     {x: 159.4472295140548, y: 466.8085509182006},
     {x: 186.959041700155, y: 459.6245422363281},
     {x: 206.9004669189453, y: 441.99942195211446},
     {x: 220.78640747070312, y: 421.3307439100839},
     {x: 230.50656127929688, y: 402.52032197544946},
     {x: 238.83811950683594, y: 432.49179114716753},
     {x: 262.5861952597511, y: 445.73858642578125},
     {x: 289.88291004679735, y: 456.84735107421875},
     {x: 320.5100177509911, y: 462.4017028808594},
     {x: 353.43779542737775, y: 462.4017028808594},
     {x: 380.8112212971238, y: 456.84735107421875},
     {x: 401.3035888671875, y: 443.598529447557},
     {x: 406.85797119140625, y: 416.5620333640845},
     {x: 395.74920654296875, y: 393.11617048040125},
     {x: 376.18719720234077, y: 374.79861420537077},
     {x: 351.1627680738072, y: 359.6457824707031},
     {x: 326.31659678331573, y: 347.145515240347},
     {x: 304.1020202636719, y: 333.9937824043866},
     {x: 284.50151800791167, y: 319.3765563964844},
     {x: 263.83282470703125, y: 305.4906311035156},
], updateCurrentStrokes)

gest.addGesture("Da", [
    {x: 113.86468505859375, y: 301.3248291015625},
 {x: 122.65245489928165, y: 298.02942295551145},
 {x: 129.50076305713935, y: 292.6317402942228},
 {x: 136.08218383789062, y: 289.2261839772402},
 {x: 143.34331800746617, y: 284.6617126464844},
 {x: 150.7648780207286, y: 281.884521484375},
 {x: 158.9998674310539, y: 279.1073303222656},
 {x: 166.42146243106066, y: 276.3301696777344},
 {x: 173.02961092398428, y: 273.552978515625},
 {x: 181.02633973917352, y: 272.16436767578125},
 {x: 189.0230990719409, y: 270.7757873535156},
 {x: 197.01985840470826, y: 272.16436767578125},
 {x: 205.51187133789062, y: 273.0576943976319},
 {x: 212.43816064071785, y: 276.3301696777344},
 {x: 218.70940092685072, y: 281.884521484375},
 {x: 224.7423545694356, y: 286.0503234863281},
 {x: 230.6966166812584, y: 290.40614828421263},
 {x: 235.41971204991785, y: 295.7704772949219},
 {x: 240.06411588781523, y: 301.3248291015625},
 {x: 243.89507321862948, y: 306.87921142578125},
 {x: 249.11461087170935, y: 311.0450134277344},
 {x: 255.8263568138742, y: 315.53589050528046},
 {x: 262.807429047888, y: 319.3765563964844},
 {x: 271.8965689396026, y: 320.63126639686567},
 {x: 280.3473257236785, y: 323.5423583984375},
 {x: 289.1574749974797, y: 322.15374755859375},
 {x: 296.3422139387591, y: 318.8048197526472},
 {x: 304.1987711509906, y: 315.11403402479067},
 {x: 311.3326284442586, y: 311.0450134277344},
 {x: 317.3655865559504, y: 306.87921142578125},
 {x: 322.15374755859375, y: 302.28203277339156},
 {x: 328.0429440363734, y: 297.1590576171875},
 {x: 333.26251220703125, y: 292.9932861328125},
], updateCurrentStrokes)

gest.addGesture("Da2", [
    {x: 73.59546661376953, y: 244.3925018310547},
     {x: 91.35981471411903, y: 240.22671508789062},
     {x: 106.92171478271484, y: 243.18456528801028},
     {x: 120.06775702401092, y: 248.5582733154297},
     {x: 129.68075421484858, y: 258.2784423828125},
     {x: 137.4707794189453, y: 270.63499942644125},
     {x: 141.63656616210938, y: 284.9889629519927},
     {x: 145.80233764648438, y: 299.34294173633316},
     {x: 147.19093322753906, y: 316.47409642399396},
     {x: 147.19093322753906, y: 334.99384669270944},
     {x: 147.19093322753906, y: 353.5135969614249},
     {x: 145.80233764648438, y: 370.6447516490857},
     {x: 145.80233764648438, y: 389.1645019178012},
     {x: 145.80233764648438, y: 407.6842521865167},
     {x: 149.96812438964844, y: 422.8516406399648},
     {x: 156.70966300340683, y: 434.6298522949219},
     {x: 163.85406494140625, y: 446.00520062563794},
     {x: 173.57421875, y: 456.4316335338766},
     {x: 191.67825147837334, y: 456.84735107421875},
     {x: 207.083871860492, y: 451.29296875},
     {x: 219.47407994133502, y: 444.3500061035156},
     {x: 234.31364360195937, y: 438.7956237792969},
     {x: 247.41545638478942, y: 431.60689233991263},
     {x: 260.7208828043823, y: 424.9096984863281},
     {x: 275.7987023505993, y: 417.9667053222656},
     {x: 288.8275146484375, y: 411.6623558310496},
     {x: 306.13349189823094, y: 409.6351623535156},
     {x: 324.6532421669464, y: 409.6351623535156},
     {x: 340.2054748535156, y: 413.41610933278406},
     {x: 356.61487263209835, y: 417.9667053222656},
     {x: 367.97735595703125, y: 425.1239722660482},
     {x: 379.0860900878906, y: 433.34840886251624},
     {x: 387.41766357421875, y: 444.3500061035156},
], updateCurrentStrokes)

gest.addGesture("EI", [
    {x: 34.71484375, y: 301.3248291015625},
     {x: 45.67491982177282, y: 297.2148099837564},
     {x: 56.817029493960185, y: 294.3818664550781},
     {x: 67.9276310989023, y: 290.7167758528467},
     {x: 79.00636724211003, y: 287.4867291105396},
     {x: 88.74020077279374, y: 284.6617126464844},
     {x: 99.0569835225468, y: 283.27313232421875},
     {x: 110.4508679081114, y: 282.5211620978857},
     {x: 121.89252375463711, y: 281.884521484375},
     {x: 132.20930650439016, y: 280.4959411621094},
     {x: 142.5260587365651, y: 279.1073303222656},
     {x: 152.84284148631815, y: 277.71875},
     {x: 159.77239926120208, y: 283.35725246280185},
     {x: 166.77163943003495, y: 288.8275146484375},
     {x: 173.7360756233097, y: 294.3818664550781},
     {x: 182.2828113352954, y: 300.124763886626},
     {x: 192.80189818513435, y: 304.1020202636719},
     {x: 200.3414592551999, y: 308.267822265625},
     {x: 209.26963116510922, y: 311.0450134277344},
     {x: 218.19783359259665, y: 313.8221740722656},
     {x: 229.90319666461534, y: 313.8221740722656},
     {x: 241.60855973663402, y: 313.8221740722656},
     {x: 251.92534248638708, y: 312.43359375},
     {x: 263.05553675647894, y: 311.0450134277344},
     {x: 274.1857094472658, y: 309.6564025878906},
     {x: 285.8910725192845, y: 309.6564025878906},
     {x: 297.02126678937634, y: 308.267822265625},
     {x: 308.3988200870424, y: 306.87921142578125},
     {x: 320.10418315906105, y: 306.87921142578125},
     {x: 331.2343774291529, y: 305.4906311035156},
     {x: 342.36455905845, y: 304.1020202636719},
     {x: 352.68134180820306, y: 302.71343994140625},
     {x: 361.03436279296875, y: 298.54766845703125},
], updateCurrentStrokes)

gest.addGesture("EI2", [
    {x: 59.709529876708984, y: 363.8115539550781},
     {x: 66.65249633789062, y: 377.29098228025725},
     {x: 76.37072957521329, y: 387.41573535236483},
     {x: 86.58344702628364, y: 394.3606262207031},
     {x: 96.91546555778474, y: 401.0174965946532},
     {x: 111.17625975488923, y: 404.0807800292969},
     {x: 125.55555633057537, y: 401.3035888671875},
     {x: 138.5462725839959, y: 397.1378173828125},
     {x: 150.72353339194157, y: 392.9720153808594},
     {x: 160.9370584832527, y: 386.029052734375},
     {x: 170.57541477263703, y: 377.697509765625},
     {x: 181.3640952583171, y: 372.14312744140625},
     {x: 193.7796121921141, y: 366.5887451171875},
     {x: 206.9004669189453, y: 367.84720854522885},
     {x: 212.45484924316406, y: 378.6358890309089},
     {x: 218.6275571874874, y: 388.8062438964844},
     {x: 223.5635986328125, y: 401.0266812505631},
     {x: 230.50656127929688, y: 410.42678141397755},
     {x: 239.54793919685724, y: 419.3553161621094},
     {x: 251.33546447753906, y: 420.6910646947357},
     {x: 260.7883964305928, y: 413.8009338378906},
     {x: 270.12226387754095, y: 404.73428914274956},
     {x: 277.86306506981464, y: 395.74920654296875},
     {x: 288.6517760730728, y: 390.1948547363281},
     {x: 302.45587779824234, y: 391.58343505859375},
     {x: 312.6693984202687, y: 398.5263977050781},
     {x: 325.0398261229151, y: 404.18966743150884},
     {x: 338.3138616849256, y: 409.6351623535156},
     {x: 354.0817341135926, y: 408.2465515136719},
     {x: 362.4229736328125, y: 400.244728222993},
     {x: 365.2001647949219, y: 386.67885657520355},
     {x: 370.7545166015625, y: 374.2633046544844},
     {x: 376.30889892578125, y: 361.03436279296875},
], updateCurrentStrokes)

gest.addGesture("Ga", [
    {x: 51.377967834472656, y: 261.0556335449219},
 {x: 69.19867487517992, y: 253.53386416153114},
 {x: 86.82318535451726, y: 247.82790757120588},
 {x: 103.85532771662427, y: 243.00390625},
 {x: 120.88196157921686, y: 238.76381326209173},
 {x: 137.97016800928265, y: 234.67234802246094},
 {x: 156.9110870361328, y: 233.3640166348696},
 {x: 161.07687377929688, y: 248.79458823434328},
 {x: 151.87645923475924, y: 262.4442138671875},
 {x: 141.7620290923235, y: 273.552978515625},
 {x: 134.50349557091965, y: 287.6289985833718},
 {x: 146.90993077663538, y: 290.7698854503027},
 {x: 164.59283380974614, y: 294.3818664550781},
 {x: 182.46365599572914, y: 298.54766845703125},
 {x: 197.73876286862713, y: 305.7698529143493},
 {x: 214.78165481813548, y: 311.0450134277344},
 {x: 228.43980788708615, y: 320.0870019731341},
 {x: 241.6153106689453, y: 330.1587927305327},
 {x: 251.4032519528431, y: 341.59405517578125},
 {x: 255.50125122070312, y: 357.092414250559},
 {x: 254.11265563964844, y: 376.11360194003873},
 {x: 245.78109741210938, y: 388.43919468580737},
 {x: 236.06094360351562, y: 401.5690765854885},
 {x: 226.34428830186337, y: 416.574611272881},
 {x: 214.02928675219707, y: 426.29827880859375},
 {x: 198.72309179099474, y: 437.2528586631788},
 {x: 182.63251198272127, y: 444.3500061035156},
 {x: 165.9477630979131, y: 451.976454244938},
 {x: 150.10791810556466, y: 460.87333037882155},
 {x: 136.08218383789062, y: 469.2134768147769},
 {x: 120.80765533447266, y: 474.3487226435017},
 {x: 102.3368081118428, y: 476.28765869140625},
 {x: 84.70421600341797, y: 479.0648498535156},
], updateCurrentStrokes)

gest.addGesture("Ga2", [
    {x: 151.35671997070312, y: 290.2160949707031},
     {x: 167.00585232819043, y: 284.2871143636451},
     {x: 180.52722398405123, y: 277.71875},
     {x: 195.86907555420044, y: 275.39153679611957},
     {x: 209.40184016111309, y: 271.051602242591},
     {x: 223.80411840988097, y: 266.6099853515625},
     {x: 238.07329988070356, y: 262.4442138671875},
     {x: 252.58986034745462, y: 258.2784423828125},
     {x: 266.7860913664493, y: 253.93655155990754},
     {x: 279.73961953653514, y: 248.5582733154297},
     {x: 293.7705601402955, y: 245.78109741210938},
     {x: 309.4283353410602, y: 243.00390625},
     {x: 326.23645184814086, y: 243.00390625},
     {x: 343.0445683552215, y: 243.00390625},
     {x: 359.8526848623021, y: 243.00390625},
     {x: 370.7545166015625, y: 248.91019101782027},
     {x: 379.5829925834947, y: 256.88983154296875},
     {x: 388.8062438964844, y: 265.2881082573985},
     {x: 391.58343505859375, y: 280.1324451227086},
     {x: 391.58343505859375, y: 296.9405616297893},
     {x: 391.58343505859375, y: 313.7486781368699},
     {x: 388.8062438964844, y: 327.77960348184115},
     {x: 386.029052734375, y: 342.6239492854244},
     {x: 384.6404724121094, y: 358.0434854702394},
     {x: 384.6404724121094, y: 374.85160197732},
     {x: 384.6404724121094, y: 391.6597184844006},
     {x: 386.029052734375, y: 407.07925466921563},
     {x: 388.8062438964844, y: 421.9236094113091},
     {x: 394.07719515882155, y: 435.7350077842862},
     {x: 401.3035888671875, y: 448.4177556122218},
     {x: 408.2465515136719, y: 459.0963209931569},
     {x: 416.578125, y: 469.19969599291943},
     {x: 429.0754699707031, y: 473.5104675292969},
], updateCurrentStrokes)

gest.addGesture("Ha", [
    {x: 170.79702758789062, y: 288.8275146484375},
 {x: 137.72376619809813, y: 288.8275146484375},
 {x: 111.35521579804563, y: 297.1590576171875},
 {x: 95.43751813640526, y: 316.9748186795572},
 {x: 80.53843688964844, y: 340.62302395207826},
 {x: 74.98406219482422, y: 368.95532663655155},
 {x: 77.86718129055204, y: 400.0209358965347},
 {x: 93.03578186035156, y: 421.11722310570696},
 {x: 110.87089724888514, y: 438.7956237792969},
 {x: 138.0528509976479, y: 447.127197265625},
 {x: 170.79830100213707, y: 445.73858642578125},
 {x: 196.51123706653897, y: 434.6298522949219},
 {x: 220.83038288273175, y: 422.11051937658925},
 {x: 249.5547967250135, y: 411.02374267578125},
 {x: 272.9578946747254, y: 392.9720153808594},
 {x: 287.43890380859375, y: 370.31268764669494},
 {x: 299.4603892395605, y: 345.7598571777344},
 {x: 314.22536452755793, y: 324.52775712635},
 {x: 329.56259385749576, y: 302.71343994140625},
 {x: 356.5391038943865, y: 292.46373385978336},
 {x: 388.83440720891485, y: 290.2160949707031},
 {x: 420.743896484375, y: 289.41611796084305},
 {x: 437.40704345703125, y: 309.079914212427},
 {x: 447.127197265625, y: 334.05986271108674},
 {x: 452.6815490722656, y: 363.4529858871496},
 {x: 445.73858642578125, y: 391.21013448619186},
 {x: 434.6298522949219, y: 414.8014937240757},
 {x: 420.743896484375, y: 434.80222870044355},
 {x: 398.5263977050781, y: 451.35192558318664},
 {x: 377.41502484195354, y: 466.5675048828125},
 {x: 351.53160677243676, y: 476.0702609033445},
 {x: 321.3255856569987, y: 473.5104675292969},
 {x: 304.1020202636719, y: 456.84735107421875},
], updateCurrentStrokes)

gest.addGesture("Ka", [
    {x: 98.59015655517578, y: 245.78109741210938},
     {x: 85.87990082227971, y: 258.2784423828125},
     {x: 77.81974644888803, y: 272.1058749052086},
     {x: 70.81828308105469, y: 284.283339054476},
     {x: 68.04109191894531, y: 300.6508132782121},
     {x: 72.20687866210938, y: 315.62970085928526},
     {x: 87.02950036423303, y: 320.7651672363281},
     {x: 101.36734008789062, y: 325.5720018369077},
     {x: 117.56246143832634, y: 327.7081298828125},
     {x: 134.5050999948231, y: 326.31951904296875},
     {x: 151.68602072564235, y: 323.5423583984375},
     {x: 166.9031536430625, y: 317.98797607421875},
     {x: 184.44319286208423, y: 314.63636844837276},
     {x: 199.70636585832852, y: 306.87921142578125},
     {x: 214.26791284321493, y: 298.54766845703125},
     {x: 228.1323448061219, y: 290.7089000014424},
     {x: 244.45093829288822, y: 285.3267995144206},
     {x: 261.06659595720913, y: 279.1073303222656},
     {x: 277.9196957603909, y: 274.9415588378906},
     {x: 293.66996432227165, y: 268.7104983242127},
     {x: 309.479084162761, y: 262.6215361893397},
     {x: 325.10840336061955, y: 255.50125122070312},
     {x: 340.9007069311977, y: 251.33546447753906},
     {x: 359.2319563275382, y: 251.33546447753906},
     {x: 374.9938161977731, y: 255.57474881496063},
     {x: 390.8165787275429, y: 259.6670227050781},
     {x: 401.3035888671875, y: 268.32468242038595},
     {x: 404.0807800292969, y: 283.8787406546171},
     {x: 398.2164181984046, y: 297.1590576171875},
     {x: 385.1003578593641, y: 306.4193259785265},
     {x: 370.16328053318045, y: 315.2107849121094},
     {x: 357.14814392759024, y: 322.15374755859375},
     {x: 345.7598571777344, y: 329.0967102050781},
], updateCurrentStrokes)

gest.addGesture("Ka2", [
    {x: 241.6153106689453, y: 302.71343994140625},
 {x: 241.979225183589, y: 305.9886665742707},
 {x: 242.3431396982327, y: 309.2638932071352},
 {x: 242.7070542128764, y: 312.53911983999967},
 {x: 243.00390625, y: 315.81806074195265},
 {x: 243.00390625, y: 319.1134428549394},
 {x: 243.00390625, y: 322.4088249679262},
 {x: 243.00390625, y: 325.70420708091297},
 {x: 243.00390625, y: 328.99958919389974},
 {x: 243.00390625, y: 332.2949713068865},
 {x: 243.00390625, y: 335.5903534198733},
 {x: 243.00390625, y: 338.88573553286005},
 {x: 243.00390625, y: 342.1811176458468},
 {x: 243.00390625, y: 345.4764997588336},
 {x: 243.00390625, y: 348.77188187182037},
 {x: 243.00390625, y: 352.06726398480714},
 {x: 243.00390625, y: 355.3626460977939},
 {x: 243.00390625, y: 358.6580282107807},
 {x: 243.00390625, y: 361.95341032376746},
 {x: 243.00390625, y: 365.24879243675423},
 {x: 242.75041504073982, y: 368.4843328044999},
 {x: 241.6153106689453, y: 371.5117504904866},
 {x: 241.6153106689453, y: 374.80713260347335},
 {x: 241.6153106689453, y: 378.1025147164601},
 {x: 241.6153106689453, y: 381.3978968294469},
 {x: 240.22671508789062, y: 384.11809935088394},
 {x: 240.22671508789062, y: 387.4134814638707},
 {x: 240.22671508789062, y: 390.7088635768575},
 {x: 240.22671508789062, y: 394.00424568984425},
 {x: 240.22671508789062, y: 397.299627802831},
 {x: 239.92260922986736, y: 400.5232202609684},
 {x: 238.83811950683594, y: 403.5625890784198},
 {x: 238.83811950683594, y: 406.85797119140625},
], updateCurrentStrokes)

gest.addGesture("Ka3", [
    {x: 127.75062561035156, y: 388.8062438964844},
     {x: 121.29892044453815, y: 400.8123291554617},
     {x: 115.92596970528105, y: 410.92379392393826},
     {x: 108.97022036590936, y: 422.86118489586374},
     {x: 102.09547447615063, y: 431.8526611328125},
     {x: 96.58949894109506, y: 442.1848702486976},
     {x: 91.64718627929688, y: 451.5502571469151},
     {x: 98.34195551987129, y: 459.37633847362963},
     {x: 110.70338427253192, y: 461.01312255859375},
     {x: 121.77901234893106, y: 463.7903137207031},
     {x: 134.24325126517394, y: 465.17889404296875},
     {x: 146.97921463286306, y: 461.0836949064836},
     {x: 159.30982681494558, y: 455.12202920182887},
     {x: 172.08897722770405, y: 451.29296875},
     {x: 181.9824829862764, y: 445.6618812599393},
     {x: 193.17295788981113, y: 438.6371939976216},
     {x: 205.03807441989312, y: 433.2412414550781},
     {x: 216.59910531276444, y: 427.70837478205937},
     {x: 229.86333904870224, y: 425.2313060675539},
     {x: 243.08709878859182, y: 422.13250732421875},
     {x: 255.78956778239265, y: 419.3553161621094},
     {x: 267.6786073791306, y: 416.578125},
     {x: 280.30065191488285, y: 412.412353515625},
     {x: 291.20491744907, y: 407.257729035305},
     {x: 303.03389828587655, y: 402.37173431967517},
     {x: 314.4804996122107, y: 398.5263977050781},
     {x: 328.3333188507192, y: 398.5263977050781},
     {x: 336.63175576500896, y: 404.0807800292969},
     {x: 345.91685118487413, y: 411.1807401332629},
     {x: 352.70281982421875, y: 419.78247461742137},
     {x: 356.86859130859375, y: 429.4695223715549},
     {x: 358.2572021484375, y: 441.93373077021965},
     {x: 356.86859130859375, y: 455.458740234375},
], updateCurrentStrokes)

gest.addGesture("La", [
    {x: 130.52781677246094, y: 272.16436767578125},
 {x: 109.82281135098646, y: 282.30608950841787},
 {x: 88.35347488196244, y: 290.73261715937946},
 {x: 70.81828308105469, y: 301.7493427874639},
 {x: 59.709529876708984, y: 316.4887685707987},
 {x: 56.30085313773257, y: 336.79678562579926},
 {x: 67.59994813028733, y: 353.6502612054005},
 {x: 81.67623195888768, y: 367.72655268925706},
 {x: 101.61880441415852, y: 373.5317077636719},
 {x: 124.36199049750597, y: 377.697509765625},
 {x: 148.57576063716314, y: 376.31266713861896},
 {x: 168.6131396168912, y: 368.77263960778726},
 {x: 186.94154292250212, y: 361.03436279296875},
 {x: 205.51043342566933, y: 351.31564691239697},
 {x: 220.40014997537892, y: 339.203125753444},
 {x: 235.54566480050823, y: 327.7081298828125},
 {x: 252.71623330733843, y: 315.2107849121094},
 {x: 268.76503044325415, y: 303.335586011824},
 {x: 284.6617126464844, y: 290.82675539375595},
 {x: 302.40865530001594, y: 278.0235279431212},
 {x: 320.60331050996206, y: 267.99859619140625},
 {x: 340.8075494584776, y: 259.6670227050781},
 {x: 360.6685665299452, y: 251.7012647602134},
 {x: 382.10988726800275, y: 244.3925018310547},
 {x: 400.8549023951572, y: 252.27536865605123},
 {x: 416.578125, y: 265.66945261840556},
 {x: 422.13250732421875, y: 286.52930640602364},
 {x: 412.412353515625, y: 301.5965477920429},
 {x: 401.3035888671875, y: 320.15568321334365},
 {x: 386.48001314756345, y: 333.7313322686033},
 {x: 370.7545166015625, y: 344.3092967645404},
 {x: 354.69755637588094, y: 355.4800109863281},
 {x: 340.2054748535156, y: 366.5887451171875},
], updateCurrentStrokes)

gest.addGesture("La2", [
    {x: 209.6776580810547, y: 361.03436279296875},
     {x: 224.80123239068547, y: 363.8115539550781},
     {x: 238.62813776969205, y: 367.7673719124718},
     {x: 252.61804115314908, y: 369.3659362792969},
     {x: 268.0835037738411, y: 369.3659362792969},
     {x: 278.5696486393967, y: 376.62213458296696},
     {x: 275.7146929941369, y: 390.1948547363281},
     {x: 267.1921930199293, y: 397.1378173828125},
     {x: 257.0428610667709, y: 404.0807800292969},
     {x: 248.83443272587425, y: 409.6351623535156},
     {x: 262.11079667878096, y: 413.8009338378906},
     {x: 276.1876484596292, y: 415.1895446777344},
     {x: 289.6893619561288, y: 417.9667053222656},
     {x: 300.98902257486765, y: 422.13250732421875},
     {x: 310.900133388919, y: 427.6868591308594},
     {x: 315.2107849121094, y: 438.841670228361},
     {x: 310.56977989583254, y: 451.29296875},
     {x: 300.4204479426742, y: 458.2359313964844},
     {x: 289.27311982363597, y: 464.7332888677703},
     {x: 276.879008454654, y: 470.18443759026786},
     {x: 263.1190197317705, y: 474.8990478515625},
     {x: 249.7068938634948, y: 480.45343017578125},
     {x: 235.58777713331244, y: 483.70379300755394},
     {x: 221.65183791345297, y: 487.3963928222656},
     {x: 208.59755618231085, y: 491.2536977519792},
     {x: 193.8350425585472, y: 492.9507751464844},
     {x: 180.51718139648438, y: 496.9725936601097},
     {x: 167.97286290865145, y: 499.89373779296875},
     {x: 153.89598061022508, y: 498.5051574707031},
     {x: 148.57952880859375, y: 488.35614665164246},
     {x: 152.7453155517578, y: 475.42962985671284},
     {x: 159.7915002685701, y: 465.0756731069119},
     {x: 169.40843200683594, y: 456.84735107421875},
], updateCurrentStrokes)

gest.addGesture("Ma", [
    {x: 72.20687866210938, y: 227.7293701171875},
 {x: 96.38761706790993, y: 226.3407745361328},
 {x: 113.86468505859375, y: 233.61962007357374},
 {x: 127.27254170691336, y: 245.78109741210938},
 {x: 134.69358825683594, y: 263.11596439031155},
 {x: 140.2479705810547, y: 282.3174955942175},
 {x: 144.41375732421875, y: 302.9076223791782},
 {x: 145.03348958407702, y: 326.31951904296875},
 {x: 140.2479705810547, y: 346.28991356807114},
 {x: 138.859375, y: 370.4706564430379},
 {x: 140.2479705810547, y: 393.83797439010795},
 {x: 144.41375732421875, y: 414.4281011750686},
 {x: 152.7453155517578, y: 431.6658724651593},
 {x: 164.29679059473173, y: 447.5699180539938},
 {x: 176.35140991210938, y: 463.26554390276726},
 {x: 190.2373504638672, y: 474.9489328686392},
 {x: 205.32296468289675, y: 484.6192321777344},
 {x: 222.44777302738592, y: 493.22354811948594},
 {x: 243.00390625, y: 489.78837952208556},
 {x: 255.50125122070312, y: 476.716390506052},
 {x: 268.1444994838178, y: 463.7903137207031},
 {x: 279.1073303222656, y: 449.183801633904},
 {x: 284.6617126464844, y: 429.98227042999804},
 {x: 284.6617126464844, y: 405.2263569018733},
 {x: 286.0503234863281, y: 381.04562481647014},
 {x: 286.0503234863281, y: 356.2897112883454},
 {x: 286.0503234863281, y: 331.5337977602207},
 {x: 294.72145424395876, y: 313.8221740722656},
 {x: 311.04712509491424, y: 301.3248291015625},
 {x: 324.9309387207031, y: 289.6393087406147},
 {x: 341.01996640438773, y: 277.71875},
 {x: 357.6825491645963, y: 267.99859619140625},
 {x: 372.14312744140625, y: 256.88983154296875},
], updateCurrentStrokes)

gest.addGesture("Ma2", [
    {x: 93.03578186035156, y: 370.7545166015625},
 {x: 101.17247441276969, y: 363.78022329726883},
 {x: 108.28206448887573, y: 358.2572021484375},
 {x: 113.44432962488874, y: 352.70281982421875},
 {x: 120.4016184908128, y: 347.5544698818636},
 {x: 126.66062658921733, y: 342.68406617453184},
 {x: 134.38683816630535, y: 337.42828369140625},
 {x: 142.81191432745592, y: 333.26251220703125},
 {x: 151.75590476875195, y: 328.8971199993045},
 {x: 161.48776666697535, y: 324.7254945344427},
 {x: 169.1479251554871, y: 320.7651672363281},
 {x: 176.35140991210938, y: 317.2520045327187},
 {x: 184.68296813964844, y: 314.866915300026},
 {x: 194.3548743721198, y: 313.8221740722656},
 {x: 205.07152183235155, y: 313.8221740722656},
 {x: 212.43578328013518, y: 317.98797607421875},
 {x: 218.00921630859375, y: 323.1311905059919},
 {x: 223.57078380687116, y: 329.10389545809215},
 {x: 230.50656127929688, y: 336.1342382800607},
 {x: 236.8150468492627, y: 342.982666015625},
 {x: 243.00390625, y: 348.32387900301615},
 {x: 251.07595648945298, y: 352.44330898449056},
 {x: 260.4431482090907, y: 355.86806947404915},
 {x: 269.77324764165814, y: 359.6457824707031},
 {x: 278.86482503446774, y: 363.56904866728024},
 {x: 288.457788365646, y: 367.09819299379586},
 {x: 298.03069307759574, y: 370.23755258372387},
 {x: 307.9188000803408, y: 373.3571985886709},
 {x: 317.44390167282427, y: 376.30889892578125},
 {x: 325.86896865520595, y: 380.4747009277344},
 {x: 336.010456251784, y: 381.86328125},
 {x: 346.151943848362, y: 383.2518615722656},
 {x: 356.86859130859375, y: 383.2518615722656},
], updateCurrentStrokes)

gest.addGesture("Na", [
    {x: 79.14984130859375, y: 481.842041015625},
 {x: 104.14453125, y: 473.16950929676017},
 {x: 126.72831898942259, y: 467.9560852050781},
 {x: 141.91348462041427, y: 455.18182481902977},
 {x: 138.859375, y: 430.384025194476},
 {x: 129.13922119140625, y: 411.4935511824601},
 {x: 119.41905975341797, y: 389.34940519961106},
 {x: 111.69189426349489, y: 367.19314449626296},
 {x: 109.69890594482422, y: 341.03487396990784},
 {x: 118.03047180175781, y: 321.5692279957368},
 {x: 129.13922119140625, y: 304.88076555428063},
 {x: 143.89861229472675, y: 290.2160949707031},
 {x: 159.6882781982422, y: 277.39513305360896},
 {x: 176.35140991210938, y: 266.2610529363715},
 {x: 198.60626809656168, y: 258.2784423828125},
 {x: 222.38779972287156, y: 252.51126338748},
 {x: 249.69797969885516, y: 251.33546447753906},
 {x: 277.4951915299598, y: 251.33546447753906},
 {x: 302.51521219895506, y: 254.11265563964844},
 {x: 322.15374755859375, y: 263.8981640900651},
 {x: 340.2961449641385, y: 273.552978515625},
 {x: 356.9506378671031, y: 284.74375920499375},
 {x: 361.03436279296875, y: 309.22261374612617},
 {x: 351.314208984375, y: 329.7399242061997},
 {x: 341.26245810989053, y: 349.9256286621094},
 {x: 327.68810135802823, y: 366.5887451171875},
 {x: 317.98797607421875, y: 387.12609304055553},
 {x: 316.599365234375, y: 411.570944907624},
 {x: 320.7651672363281, y: 436.0157662571143},
 {x: 329.93282554878397, y: 455.458740234375},
 {x: 346.0461039295243, y: 467.9560852050781},
 {x: 365.2001647949219, y: 476.59923617078516},
 {x: 384.6404724121094, y: 487.3963928222656},
], updateCurrentStrokes)

gest.addGesture("Na2", [
    {x: 259.6670227050781, y: 273.552978515625},
 {x: 246.96077413316152, y: 280.4959411621094},
 {x: 237.75868868878084, y: 286.0503234863281},
 {x: 226.3407745361328, y: 290.44966129806835},
 {x: 217.06004012940406, y: 298.1082442265408},
 {x: 222.1750030517578, y: 304.35112644725206},
 {x: 231.0510087677716, y: 311.0450134277344},
 {x: 243.0303158918398, y: 313.8221740722656},
 {x: 256.6364334157315, y: 316.599365234375},
 {x: 269.3871765136719, y: 319.4185014253729},
 {x: 274.9415588378906, y: 328.62058686975354},
 {x: 269.3871765136719, y: 337.8226723141342},
 {x: 261.0556335449219, y: 345.0610175725956},
 {x: 253.94096802794562, y: 352.70281982421875},
 {x: 243.65553791787443, y: 357.6055633200116},
 {x: 234.67234802246094, y: 365.38738779367344},
 {x: 241.6153106689453, y: 370.4237017536791},
 {x: 255.13798948254808, y: 373.5317077636719},
 {x: 265.2214050292969, y: 378.2047599855225},
 {x: 263.83282470703125, y: 388.79548678732505},
 {x: 256.88983154296875, y: 396.60896139186195},
 {x: 248.5582733154297, y: 403.0338709329223},
 {x: 238.83811950683594, y: 410.5104507382264},
 {x: 232.9265171621195, y: 419.3553161621094},
 {x: 229.1179656982422, y: 430.3032324668315},
 {x: 237.44952392578125, y: 436.72814200789185},
 {x: 245.78109741210938, y: 445.5932842586782},
 {x: 254.11265563964844, y: 452.83160978924354},
 {x: 254.48066328688358, y: 465.17889404296875},
 {x: 248.05576900461227, y: 473.5104675292969},
 {x: 238.83811950683594, y: 480.67612671752164},
 {x: 230.50656127929688, y: 487.101036258582},
 {x: 223.5635986328125, y: 495.72796630859375},
], updateCurrentStrokes)

gest.addGesture("Nga", [
    {x: 158.2996826171875, y: 237.44952392578125},
 {x: 140.2479705810547, y: 246.5050582368999},
 {x: 124.01423507635886, y: 254.11265563964844},
 {x: 106.30246408468294, y: 261.0556335449219},
 {x: 91.64718627929688, y: 272.68193661551},
 {x: 79.14984130859375, y: 284.8393427762874},
 {x: 73.59546661376953, y: 302.31288053017704},
 {x: 86.50266584266043, y: 312.43359375},
 {x: 109.5305782913743, y: 312.43359375},
 {x: 131.09343044988697, y: 307.70220237286895},
 {x: 152.20025947679824, y: 301.8698911659518},
 {x: 173.53888690469213, y: 297.1943898507446},
 {x: 195.64919004224814, y: 294.3818664550781},
 {x: 216.6237917870169, y: 288.8275146484375},
 {x: 236.29931822328263, y: 284.6617126464844},
 {x: 256.88983154296875, y: 285.13536712048585},
 {x: 265.2214050292969, y: 300.64512654148353},
 {x: 260.7947498632226, y: 321.0260451845721},
 {x: 248.5582733154297, y: 333.2915015594918},
 {x: 232.2060735656036, y: 341.59405517578125},
 {x: 216.50567532539057, y: 351.42915564961817},
 {x: 199.41102473599952, y: 362.4229736328125},
 {x: 181.65458935847133, y: 373.7828981429521},
 {x: 165.64472092158678, y: 386.029052734375},
 {x: 147.7216140898836, y: 396.87247403590743},
 {x: 131.91641235351562, y: 408.8597374043786},
 {x: 115.29831849429914, y: 419.3102778125535},
 {x: 99.97875213623047, y: 431.1121044368947},
 {x: 90.25859069824219, y: 447.6735171710646},
 {x: 86.29920886441346, y: 465.17889404296875},
 {x: 105.53312683105469, y: 471.4131431973724},
 {x: 124.4999397752397, y: 476.28765869140625},
 {x: 144.41375732421875, y: 479.0648498535156},
], updateCurrentStrokes)

gest.addGesture("Nga2", [
    {x: 269.3871765136719, y: 294.3818664550781},
 {x: 282.92918391574784, y: 286.0503234863281},
 {x: 294.7685951519268, y: 279.1073303222656},
 {x: 308.2440194138965, y: 273.552978515625},
 {x: 322.4942553652673, y: 267.6580883847327},
 {x: 336.92411352697, y: 262.4442138671875},
 {x: 350.0717300287493, y: 255.50125122070312},
 {x: 359.4709193447066, y: 262.4442138671875},
 {x: 362.4229736328125, y: 276.6477320001352},
 {x: 356.86859130859375, y: 288.24892209697003},
 {x: 348.8361805302863, y: 299.63709264599174},
 {x: 340.2054748535156, y: 309.15063231868396},
 {x: 334.6510925292969, y: 316.3744405217158},
 {x: 348.75563106356776, y: 310.82640018643224},
 {x: 363.48484157686784, y: 305.4906311035156},
 {x: 379.60165145526315, y: 304.1020202636719},
 {x: 395.9438034177048, y: 304.1020202636719},
 {x: 409.6351623535156, y: 309.44045527301773},
 {x: 419.3553161621094, y: 316.06245342686566},
 {x: 429.0309836115911, y: 323.5423583984375},
 {x: 434.6298522949219, y: 335.9124736564992},
 {x: 438.7956237792969, y: 348.08885413456585},
 {x: 438.7956237792969, y: 364.4310060970075},
 {x: 433.84361453176604, y: 377.0951366889371},
 {x: 426.29827880859375, y: 389.4984967416067},
 {x: 417.5357154433237, y: 398.9573970561169},
 {x: 408.68747310297005, y: 409.19424076421745},
 {x: 400.47773719788216, y: 421.5697663038676},
 {x: 389.89751938285355, y: 432.14998995173136},
 {x: 379.0860900878906, y: 441.00757614902165},
 {x: 367.97735595703125, y: 449.4946847535619},
 {x: 356.86859130859375, y: 457.1683155668556},
 {x: 348.5370178222656, y: 465.17889404296875},
], updateCurrentStrokes)

gest.addGesture("OU", [
    {x: 138.859375, y: 320.7651672363281},
     {x: 151.43516633533184, y: 302.71343994140625},
     {x: 164.37307448914174, y: 291.3451733707078},
     {x: 183.1457150149163, y: 283.27313232421875},
     {x: 202.42313179508017, y: 274.9415588378906},
     {x: 222.62557725256903, y: 267.99859619140625},
     {x: 246.73350954666319, y: 267.99859619140625},
     {x: 269.4528310009136, y: 266.6099853515625},
     {x: 286.61777013094525, y: 273.552978515625},
     {x: 295.7704772949219, y: 290.1350445632035},
     {x: 286.9728960029566, y: 307.3452294731231},
     {x: 270.7757873535156, y: 319.86358287911816},
     {x: 254.61107125419406, y: 331.8739013671875},
     {x: 241.44442676981086, y: 344.5421321148082},
     {x: 247.82366466202313, y: 348.5370178222656},
     {x: 269.96785230109106, y: 345.7598571777344},
     {x: 292.68717375534146, y: 344.3712463378906},
     {x: 313.44275502367253, y: 348.5370178222656},
     {x: 326.1049839450196, y: 362.4229736328125},
     {x: 333.26251220703125, y: 379.37337766489503},
     {x: 330.4853210449219, y: 402.3309597141037},
     {x: 320.7651672363281, y: 419.9724200340518},
     {x: 309.6564025878906, y: 435.4118490557814},
     {x: 294.93244058158564, y: 449.35381430122686},
     {x: 282.161297688642, y: 461.01312255859375},
     {x: 266.48361701046446, y: 473.5104675292969},
     {x: 247.37042980694324, y: 481.64129979014467},
     {x: 225.39895924709, y: 487.3963928222656},
     {x: 201.86619128575646, y: 486.0078125},
     {x: 183.71399542628492, y: 479.4844681101185},
     {x: 163.85406494140625, y: 474.1772333387602},
     {x: 146.30420609780512, y: 465.17889404296875},
     {x: 130.52781677246094, y: 456.84735107421875},
], updateCurrentStrokes)

gest.addGesture("Pa", [
    {x: 58.32093811035156, y: 330.4853210449219},
 {x: 86.40526922123027, y: 322.15374755859375},
 {x: 111.0875015258789, y: 313.3501084495834},
 {x: 133.46021152412072, y: 319.3765563964844},
 {x: 145.80233764648438, y: 338.0800336079353},
 {x: 144.07886181142698, y: 366.5887451171875},
 {x: 134.69358825683594, y: 389.87590687542104},
 {x: 128.60691885719032, y: 414.33324202138994},
 {x: 122.19625091552734, y: 440.28319889506264},
 {x: 123.58484649658203, y: 469.9402155862142},
 {x: 140.5766281399193, y: 491.56219482421875},
 {x: 161.3269222707712, y: 502.6709289550781},
 {x: 186.8663105480153, y: 497.37999962352734},
 {x: 206.28207147306517, y: 479.68323850406546},
 {x: 224.2084142119312, y: 461.75689438739255},
 {x: 236.79735889217903, y: 441.4885485017494},
 {x: 244.3925018310547, y: 415.0996109952293},
 {x: 251.83237733073128, y: 388.8062438964844},
 {x: 262.4448637224032, y: 363.8109041141443},
 {x: 274.3522977318405, y: 339.995399176281},
 {x: 290.7225139876499, y: 320.25873708953765},
 {x: 310.343973542683, y: 299.9362487792969},
 {x: 330.4853210449219, y: 282.8433009238004},
 {x: 355.4800109863281, y: 272.4779170318115},
 {x: 380.9050508461775, y: 266.6099853515625},
 {x: 409.17349800456776, y: 263.83282470703125},
 {x: 426.29827880859375, y: 278.5670721645387},
 {x: 425.9224959301355, y: 303.0892228198645},
 {x: 407.23962687707893, y: 320.38350316280275},
 {x: 388.73810749167154, y: 338.88500191595523},
 {x: 367.82007678697784, y: 355.4800109863281},
 {x: 344.0543614165772, y: 365.2001647949219},
 {x: 317.98797607421875, y: 361.03436279296875},
], updateCurrentStrokes)

gest.addGesture("Pa2", [
    {x: 186.07156372070312, y: 369.3659362792969},
     {x: 191.13497705814558, y: 369.3659362792969},
     {x: 196.19839039558804, y: 369.3659362792969},
     {x: 201.2618037330305, y: 369.3659362792969},
     {x: 206.32521707047295, y: 369.3659362792969},
     {x: 211.1632971913306, y: 370.7545166015625},
     {x: 216.1044059253955, y: 371.50818366990944},
     {x: 221.05049607793276, y: 372.2311560098238},
     {x: 225.62440984296802, y: 374.20393816641786},
     {x: 230.06328794971662, y: 376.30889892578125},
     {x: 234.96086571615564, y: 377.3308131070485},
     {x: 239.40299184677693, y: 379.6509686350153},
     {x: 243.86023015976474, y: 381.5971483388282},
     {x: 248.36549941762152, y: 383.0590876744575},
     {x: 253.0212534177677, y: 384.6404724121094},
     {x: 257.44408080895175, y: 386.30618041259174},
     {x: 261.896717573717, y: 388.2587476030139},
     {x: 266.40554074670234, y: 390.1948547363281},
     {x: 271.034143385358, y: 391.8417910904361},
     {x: 275.301592718831, y: 394.3606262207031},
     {x: 280.08563857283775, y: 395.5440575026684},
     {x: 284.3335670482015, y: 398.1982521067952},
     {x: 288.7754890507693, y: 400.5832938223768},
     {x: 293.4709876104622, y: 401.78130084354007},
     {x: 297.8647797213605, y: 403.3979063015101},
     {x: 301.49498271191516, y: 406.85797119140625},
     {x: 305.8389516699425, y: 408.59487973532754},
     {x: 309.6564025878906, y: 411.26363042787835},
     {x: 312.9670747979442, y: 413.97876345931974},
     {x: 317.47239532447765, y: 416.06255558120586},
     {x: 320.7651672363281, y: 418.1352138986961},
     {x: 322.9076297570567, y: 421.497778682838},
     {x: 324.9309387207031, y: 424.9096984863281},
], updateCurrentStrokes)

gest.addGesture("Sa", [
    {x: 81.92703247070312, y: 263.83282470703125},
 {x: 118.98196311568017, y: 270.7757873535156},
 {x: 148.57952880859375, y: 285.37755270121784},
 {x: 179.12860107421875, y: 297.51470384035565},
 {x: 201.34609985351562, y: 316.35658754841995},
 {x: 215.77940834277865, y: 342.982666015625},
 {x: 223.5635986328125, y: 377.8846901919623},
 {x: 233.28375244140625, y: 385.0517069565036},
 {x: 249.5715218935492, y: 354.0914001464844},
 {x: 266.6099853515625, y: 325.1899583651686},
 {x: 284.6617126464844, y: 299.74202838927636},
 {x: 308.91526481334813, y: 280.4959411621094},
 {x: 338.2065838093879, y: 265.83168523358086},
 {x: 369.3659362792969, y: 253.94731596297618},
 {x: 405.0362761191115, y: 248.5582733154297},
 {x: 401.0511299154914, y: 276.5826286294305},
 {x: 375.56748783060516, y: 296.51188839009797},
 {x: 351.29062850997883, y: 317.98797607421875},
 {x: 339.05550654205706, y: 336.0396728515625},
 {x: 377.3377328539939, y: 336.0396728515625},
 {x: 405.366983140537, y: 349.8232492010847},
 {x: 409.6351623535156, y: 383.0838476821725},
 {x: 387.41766357421875, y: 407.6196701318283},
 {x: 361.05201810367777, y: 429.0578146599941},
 {x: 331.20738699437925, y: 444.3500061035156},
 {x: 301.3248291015625, y: 460.4073668575859},
 {x: 270.92829037900566, y: 473.5104675292969},
 {x: 234.3716181003884, y: 480.45343017578125},
 {x: 198.053201947741, y: 486.0078125},
 {x: 163.69854756019936, y: 477.6762390136719},
 {x: 131.40704552719825, y: 467.4467239760139},
 {x: 111.0875015258789, y: 443.75159113278585},
 {x: 98.59015655517578, y: 415.1895446777344},
], updateCurrentStrokes)

gest.addGesture("Ta", [
    {x: 166.63125610351562, y: 270.7757873535156},
     {x: 158.94502424688304, y: 278.4619910563809},
     {x: 151.82754407994696, y: 284.1908937109613},
     {x: 144.25762653179692, y: 288.8275146484375},
     {x: 136.08218383789062, y: 292.3354413715286},
     {x: 129.13922119140625, y: 297.8892730699383},
     {x: 123.66859896814239, y: 304.1020202636719},
     {x: 118.03047180175781, y: 311.77410119705144},
     {x: 111.74754563027432, y: 317.98797607421875},
     {x: 108.31031036376953, y: 325.4206942352064},
     {x: 103.08013914036155, y: 331.8739013671875},
     {x: 99.15314835935354, y: 338.8168640136719},
     {x: 95.80135242868425, y: 347.1484375},
     {x: 90.25859069824219, y: 354.1024790528437},
     {x: 87.48140716552734, y: 363.008671640883},
     {x: 83.31562805175781, y: 371.3396756990402},
     {x: 80.19208901311586, y: 379.0860900878906},
     {x: 76.3726577758789, y: 386.13661227814606},
     {x: 74.98406219482422, y: 395.6179701245838},
     {x: 73.59546661376953, y: 405.0993279710215},
     {x: 72.20687866210938, y: 415.3941161401155},
     {x: 74.55316251206888, y: 424.47879406856754},
     {x: 82.46746745424699, y: 427.6868591308594},
     {x: 90.56022971963, y: 430.46405029296875},
     {x: 99.95984579935998, y: 434.6109457502963},
     {x: 110.59663421070753, y: 436.0184326171875},
     {x: 120.56360559977607, y: 433.2412414550781},
     {x: 130.12306371635324, y: 429.4802185791217},
     {x: 138.859375, y: 425.48263796972503},
     {x: 148.58119856286368, y: 423.5210876464844},
     {x: 157.72563294372156, y: 419.3553161621094},
     {x: 165.24323087634397, y: 415.1895446777344},
     {x: 173.57421875, y: 411.02374267578125},
], updateCurrentStrokes)

gest.addGesture("Ta2", [
    {x: 351.314208984375, y: 434.6298522949219},
 {x: 338.34001969894496, y: 447.127197265625},
 {x: 323.4509986120116, y: 457.5873129972935},
 {x: 308.5721665080813, y: 464.87454980051245},
 {x: 293.21492107828374, y: 473.28883258382564},
 {x: 276.19883937790553, y: 479.0648498535156},
 {x: 258.85296185384516, y: 484.0447000801776},
 {x: 239.68234027193864, y: 484.6192321777344},
 {x: 221.71646839286834, y: 483.001356527784},
 {x: 205.51187133789062, y: 475.410659951786},
 {x: 195.79171752929688, y: 465.7222094933742},
 {x: 188.03516284355615, y: 454.0701599121094},
 {x: 183.29437255859375, y: 437.77550501266455},
 {x: 181.90577697753906, y: 419.7554963267137},
 {x: 183.29437255859375, y: 401.7354876407628},
 {x: 190.0119936764569, y: 387.41766357421875},
 {x: 195.79171752929688, y: 372.1619467118177},
 {x: 204.54927247522423, y: 358.2572021484375},
 {x: 213.30881346091513, y: 346.29447328224893},
 {x: 226.1873163182481, y: 333.26251220703125},
 {x: 240.54429462946513, y: 321.83617150678924},
 {x: 255.61289155069437, y: 310.9333706441634},
 {x: 270.4663305741015, y: 299.9362487792969},
 {x: 284.52561260693477, y: 290.35219501025273},
 {x: 299.9362487792969, y: 283.020819523833},
 {x: 314.1524879815989, y: 273.38781974610663},
 {x: 329.58298180406723, y: 265.2214050292969},
 {x: 345.60477953712484, y: 257.0449091835783},
 {x: 361.25986326132187, y: 249.94686889648438},
 {x: 376.97917330908854, y: 243.00390625},
 {x: 392.03495969593587, y: 238.38658990779368},
 {x: 409.66683518612024, y: 236.06094360351562},
 {x: 427.6868591308594, y: 237.44952392578125},
], updateCurrentStrokes)

gest.addGesture("Wa", [
    {x: 77.7612533569336, y: 226.3407745361328},
     {x: 103.62876428530559, y: 226.3407745361328},
     {x: 128.00310093074955, y: 227.9818454375855},
     {x: 148.63576130890667, y: 234.72858052277385},
     {x: 167.24667206915214, y: 244.3925018310547},
     {x: 181.90577697753906, y: 256.41432384054474},
     {x: 173.53153488398775, y: 276.37285307470864},
     {x: 160.2485322754829, y: 291.0444273721633},
     {x: 149.96812438964844, y: 307.7731338410885},
     {x: 140.4826804837829, y: 325.8501043958017},
     {x: 130.9267058161203, y: 345.36096375082343},
     {x: 125.56855891344715, y: 367.3822249522126},
     {x: 124.97343444824219, y: 393.00322917119246},
     {x: 129.13922119140625, y: 415.5183693459054},
     {x: 138.859375, y: 433.2925673830853},
     {x: 155.0853091827704, y: 448.9914844538469},
     {x: 177.9682703002821, y: 459.23776531168255},
     {x: 202.04750139684717, y: 463.7903137207031},
     {x: 224.8008958462988, y: 469.3446960449219},
     {x: 250.66840677467079, y: 469.3446960449219},
     {x: 275.9278036774951, y: 466.7686856722028},
     {x: 299.4219077363857, y: 462.91605522772085},
     {x: 322.7847968059807, y: 458.2359313964844},
     {x: 343.2374810606843, y: 447.127197265625},
     {x: 363.7257238703694, y: 436.10426458823025},
     {x: 379.9543760253696, y: 422.65282079137404},
     {x: 391.20380545737794, y: 403.07182930824706},
     {x: 392.9720153808594, y: 377.93672597303066},
     {x: 388.8062438964844, y: 355.42156607042176},
     {x: 379.0860900878906, y: 336.0205360542318},
     {x: 367.97735595703125, y: 320.4483387981073},
     {x: 355.4800109863281, y: 303.0110705471416},
     {x: 338.8168640136719, y: 292.9932861328125},
], updateCurrentStrokes)

gest.addGesture("Ya", [
    {x: 79.14984130859375, y: 248.5582733154297},
     {x: 111.11559456361078, y: 248.5582733154297},
     {x: 133.02424449611644, y: 261.0556335449219},
     {x: 143.02516174316406, y: 283.8338855423963},
     {x: 145.80233764648438, y: 311.0586966598803},
     {x: 137.4707794189453, y: 337.9465690528769},
     {x: 130.52781677246094, y: 366.22302808865504},
     {x: 127.75062561035156, y: 397.28580774012937},
     {x: 126.36203002929688, y: 428.6763903419884},
     {x: 127.75062561035156, y: 459.25354801595074},
     {x: 140.95676255083646, y: 480.45343017578125},
     {x: 167.60638513837912, y: 487.3963928222656},
     {x: 192.77787375515481, y: 476.28765869140625},
     {x: 220.72652402366143, y: 467.9560852050781},
     {x: 240.58188298004384, y: 449.9043884277344},
     {x: 256.88983154296875, y: 428.3052772912182},
     {x: 272.6543544234263, y: 403.10081730247293},
     {x: 287.43890380859375, y: 378.72575518974844},
     {x: 300.02092081610004, y: 351.22953694757183},
     {x: 310.0421547722989, y: 324.1594428295839},
     {x: 317.16584319517824, y: 296.5925921059021},
     {x: 331.5527638012917, y: 277.71875},
     {x: 359.09319223769603, y: 266.6099853515625},
     {x: 387.13141672675005, y: 261.0556335449219},
     {x: 412.412353515625, y: 265.77663985171523},
     {x: 427.69503475675043, y: 283.27313232421875},
     {x: 426.83717131750313, y: 309.6564025878906},
     {x: 401.4274570923357, y: 322.15374755859375},
     {x: 373.08758817199373, y: 329.5408395574119},
     {x: 344.2902186826874, y: 330.4853210449219},
     {x: 321.90813439897045, y: 319.13094323686107},
     {x: 301.3248291015625, y: 299.38918064449774},
     {x: 295.7704772949219, y: 272.16436767578125},
], updateCurrentStrokes)

gest.addGesture("Error", [//for handling wrong strokes
    {x: 111, y:11111},
], errorString)

class Player{
    constructor(playerName, playerID,roomId){
        this.playerName = playerName
        this.playerID = playerID;
        this.roomId = roomId;
        this.currLane = 0;
        this.health = 10;
        this.projectile_type = "";
        this.ward_type = "";
    }

    getHealth(){
        return this.health;
    }

    takeDamage(damageAmount){
        this.health = this.health - damageAmount;
        if(this.health < 0){
            this.health = 0;
        }
        return this.health;
    }

    getProjectile(){
        return this.projectile_type;
    }

    setProjectile(p){
        this.projectile_type = p;
    }

    setWard(w){
        this.ward_type = w;
    }

    getWard(){
        return this.ward_type;
    }
}

class Projectile{
    constructor(projectileType, imageReference){
        this.type = projectileType;
        
        if(this.type == "stone"){
            this.speed = 0;
        }else{
            this.speed = 200;
        }

        this.image = imageReference;

        this.resistance = 1;
    }

    getType(){
        return this.type;
    }

    getSpeed(){
        return this.speed;
    }

    setSpeed(s){
        this.speed = s;
    }

    getResistance(){
        return this.resistance;
    }

    setResistance(r){
        this.resistance = r;
    }

}

class Log{//Log for learning analytics
    constructor(playerName){
        this.playerName = playerName;
        this.opponentName = "";
        this.startTime = "";
        this.endTime = "";
        this.winLose = "";
        this.figures = [];
    }

    setOpponent(name){
        this.opponentName = name;
    }

    setStartTime(t){
        this.startTime = t;
    }

    setEndTime(t){
        this.endTime = t;
    }

    setWinLose(didWin){
        this.winLose = didWin;
    }
}

//Figure object for learning analytics
class Figure{
    constructor(startT){
        this.startTime = startT;
        this.endTime = "";
        this.strokes = [];
        this.scores = [];
        this.figName = "";
        this.usedHint = false;
    }

    setEndTime(t){
        this.endTime = t;
    }

    setFigName(name){
        this.figName = name;
    }

    setUsedHint(didUseHint){
        this.usedHint = didUseHint;
    }
}

var config = {
    type: Phaser.AUTO,
    parent: 'phaser-example',
    width: (2/3)*window.outerHeight,
    height: window.outerHeight,
    physics: {
      default: 'arcade',
      arcade: {
        debug: true,
        gravity: { y: 0 }
      }
    },
    scene: {
      preload: preload,
      create: create,
      update: update
    },
    gamePhase: 0,
};


var game = new Phaser.Game(config);
var emitter = new Phaser.Events.EventEmitter();
var graphics;
var hsv;

var otherPlayer;
var player;
var log;
var f;
// var gamePhase = 0;//0 for finding opponent, 1 for game playing, 2 for match end
var chars="";
var playerCharsQueue = [];
var otherCharsQueue = [];
var round = 1;
var totalHintsPage = 1;
var currHintsPage = 1;

var receivedOtherCharsQueue = false;
var playerSpellCounter = 0;
var opponentSpellCounter = 0;
var spellsPerRound = 3;

//global audio var
var wProjectile 
var eProjectile;
var sProjectile;
var wShield;
var eShield;
var sShield;

function preload() {
    //Projectiles and Wards
    this.load.image('PWater','assets/PWater.png');
    this.load.image('WWater','assets/WWater.png');
    this.load.image('PWaterII','assets/PWaterII.png');
    this.load.image('WWaterII','assets/WWaterII.png');
    this.load.image('PSky','assets/PSky.png');
    this.load.image('WSky','assets/WSky.png');
    this.load.image('PSkyII','assets/PSkyII.png');
    this.load.image('WSkyII','assets/WSkyII.png');
    this.load.image('PEarth','assets/PEarth.png');
    this.load.image('WEarth','assets/WEarth.png');
    this.load.image('PEarthII','assets/PEarthII.png');
    this.load.image('WEarthII','assets/WEarthII.png');

    //Blanks
    this.load.image('P','assets/P.png');
    this.load.image('W','assets/W.png');

    //UI Elements
    this.load.image('health_bar','assets/bar.png');
    this.load.image('bg','assets/bgII.png');
    this.load.image('letter','assets/ya.png')
    this.load.image('finding', 'assets/finding.png');
    this.load.image('win','assets/win.png');
    this.load.image('lose','assets/lose.png');

    //Hints
    this.load.image('a_hint', 'assets/a.png');
    this.load.image('ba_hint', 'assets/ba.png');
    this.load.image('da_hint', 'assets/da.png');
    this.load.image('ei_hint', 'assets/ei.png');
    this.load.image('ga_hint', 'assets/ga.png');
    this.load.image('ha_hint', 'assets/ha.png');
    this.load.image('ka_hint', 'assets/ka.png');
    this.load.image('la_hint', 'assets/la.png');
    this.load.image('ma_hint', 'assets/ma.png');
    this.load.image('na_hint', 'assets/na.png');
    this.load.image('nga_hint', 'assets/nga.png');
    this.load.image('ou_hint', 'assets/ou.png');
    this.load.image('pa_hint', 'assets/pa.png');
    this.load.image('sa_hint', 'assets/sa.png');
    this.load.image('ta_hint', 'assets/ta.png');
    this.load.image('wa_hint', 'assets/wa.png');
    this.load.image('ya_hint', 'assets/ya.png');
    

    //Hint buttons

    //Arrow buttons
    this.load.image('hint_leftArrow', 'assets/leftarrow.png');
    this.load.image('hint_rightArrow', 'assets/rightarrow.png');

    //Level 1
    this.load.image('PWaterbtn', 'assets/PWater_btn.png');
    this.load.image('PEarthbtn', 'assets/PEarth_btn.png');
    this.load.image('PSkybtn','assets/PSky_btn.png');
    this.load.image('WWaterbtn', 'assets/WWater_btn.png');
    this.load.image('WEarthbtn', 'assets/WEarth_btn.png');
    this.load.image('WSkybtn','assets/WSky_btn.png');

    //Level 2
    this.load.image('PWaterIIbtn', 'assets/PWaterII_btn.png');
    this.load.image('PEarthIIbtn', 'assets/PEarthII_btn.png');
    this.load.image('PSkyIIbtn','assets/PSkyII_btn.png');
    this.load.image('WWaterIIbtn', 'assets/WWaterII_btn.png');
    this.load.image('WEarthIIbtn', 'assets/WEarthII_btn.png');
    this.load.image('WSkyIIbtn','assets/WSkyII_btn.png');

    //Level 3
    this.load.image('PWaterIIIbtn', 'assets/PWaterIII_btn.png');
    this.load.image('PEarthIIIbtn', 'assets/PEarthIII_btn.png');
    this.load.image('PSkyIIIbtn','assets/PSkyIII_btn.png');
    this.load.image('WWaterIIIbtn', 'assets/WWaterIII_btn.png');
    this.load.image('WEarthIIIbtn', 'assets/WEarthIII_btn.png');
    this.load.image('WSkyIIIbtn','assets/WSkyIII_btn.png');

    //audio
    this.load.audio('Wprojectile','assets/audio/Wprojectile.mp3');
    this.load.audio('Eprojectile','assets/audio/Eprojectile.mp3');
    this.load.audio('Sprojectile','assets/audio/Sprojectile.mp3');
    this.load.audio('Wshield','assets/audio/Wshield.mp3');
    this.load.audio('Eshield','assets/audio/Eshield.mp3');
    this.load.audio('Sshield','assets/audio/Sshield.mp3');

}
   
function create() {
    var self = this;
    var username=document.location.search.replace(/^.*?\=/,'');
    this.socket = io();

    this.socket.emit('connectPlayer', {name: username});//connect player to the server

    this.otherPlayers = this.physics.add.group();

    console.log(self.game.config.width);
    console.log(self.game.config.height);
    console.log(localStorage);
    
    //Background
    this.background = this.add.image(self.game.config.width/2,self.game.config.height/2,'bg').setOrigin(0.5,0.5).setDisplaySize(self.game.config.width,self.game.config.height);
    // this.letter = this.add.image(self.game.config.width/2,self.game.config.height/2,'letter').setOrigin(0.5,0.5)
    //Loading gif
    this.loading = this.add.image(self.game.config.width/2, self.game.config.height/2,'finding').setOrigin(0.5,0.5).setDisplaySize(300, 75);
    
    //Projectiles
    this.myProjectiles = this.physics.add.group();//Projectiles sent by me on the field
    this.otherProjectiles = this.physics.add.group();//Projectiles sent by opponent on the field

    //Wards
    this.myWard = this.physics.add.group();
    this.otherWard = this.physics.add.group();

    //Projectile Ward collision
    this.physics.add.overlap(this.otherProjectiles.getChildren(), this.myWard.getChildren(), projectileWardCollision, null, this);
    this.physics.add.overlap(this.myProjectiles.getChildren(), this.otherWard.getChildren(), projectileWardCollision, null, this);

    //Audio
    wProjectile = this.sound.add("Wprojectile");
    eProjectile = this.sound.add("Eprojectile");
    sProjectile = this.sound.add("Sprojectile");
    wShield = this.sound.add("Wshield");
    eShield = this.sound.add("Eshield");
    sShield = this.sound.add("Sshield");

    this.socket.on('currentPlayers', function(player) {
        console.log(player.playerId + " === " + self.socket.id);
        if (player.playerId === self.socket.id) {
            addPlayer(self, player);
        } else {
            addOtherPlayer(self, player);
        }
    });

    // this.socket.on('newPlayer',function(playerInfo){//when other player is found
    //     addOtherPlayer(self, playerInfo);
    // });

    this.socket.on('disconnect', function(playerId){
        self.otherPlayers.getChildren().forEach(function (otherPlayer){
            if(playerId === otherPlayer.playerId){
                otherPlayer.destroy();
            }
        });
    });

    //Player input
    this.cursors = this.input.keyboard.createCursorKeys();

    //Throw Projectile (For debugging)
    this.input.keyboard.on('keydown_Q', function(event){//Sky
        // const pointer = self.input.activePointer;
        // this.socket.emit('playerInput', {type: "fire", lane: self.player.currLane, y: self.game.config.width - self.game.config.width/6, roomId: self.player.roomId});
        // self.myProjectiles.add(addProjectile(self, "fire",laneToCoord(self, self.player.currLane), self.game.config.width - self.game.config.width/6));
        self.player.setProjectile("PSky");
        this.socket.emit('playerInput', {projectile_type: self.player.getProjectile(), ward_type: self.player.getWard(), roomId: self.player.roomId});
        // console.log(self.player.getProjectile());
    }, this);

    this.input.keyboard.on('keydown_E', function(event){//Sky Ward
        // const pointer = self.input.activePointer;
        // self.myProjectiles.add(addProjectile(self, "nature",laneToCoord(self, self.player.currLane), self.game.config.width - self.game.config.width/6));
        // this.socket.emit('playerInput', {type: "nature", lane: self.player.currLane, y: self.game.config.width - self.game.config.width/6, roomId: self.player.roomId});
        self.player.setWard("WSky");
        if(self.myWard.type){
            self.myWard.destroy();
        }
        this.myWard.add(addWard(self, self.player.getWard(), laneToCoord(this, 0), this.player.healthBar.y - this.game.config.width/6));
        this.socket.emit('playerInput', {projectile_type: self.player.getProjectile(), ward_type: self.player.getWard(), roomId: self.player.roomId});
    }, this);

    // this.input.keyboard.on('keydown_W', function(event){//Water
    //     self.player.setProjectile("PWater");
    //     this.socket.emit('playerInput', {projectile_type: self.player.getProjectile(), ward_type: self.player.getWard(), roomId: self.player.roomId});
    // }, this);

    // this.input.keyboard.on('keydown_A', function(event){//Water Ward
    //     self.player.setWard("WWater");
    //     if(self.myWard.type){
    //         self.myWard.destroy();
    //     }
    //     this.myWard.add(addWard(self, self.player.getWard(), laneToCoord(this, 0), this.player.healthBar.y - this.game.config.width/6));
    //     this.socket.emit('playerInput', {projectile_type: self.player.getProjectile(), ward_type: self.player.getWard(), roomId: self.player.roomId});
    // }, this);

    // this.input.keyboard.on('keydown_A', function(event){//Lightning
    //     const pointer = self.input.activePointer;
    //     self.myProjectiles.add(addProjectile(self, "lightning",laneToCoord(self, self.player.currLane), self.game.config.width - self.game.config.width/6));
    //     this.socket.emit('playerInput', {type: "lightning", lane: self.player.currLane, y: self.game.config.width - self.game.config.width/6, roomId: self.player.roomId});
    // }, this);

    // this.input.keyboard.on('keydown_D', function(event){//Wind
    //     const pointer = self.input.activePointer;
    //     self.myProjectiles.add(addProjectile(self, "wind",laneToCoord(self, self.player.currLane), self.game.config.width - self.game.config.width/6));
    //     this.socket.emit('playerInput', {type: "wind", lane: self.player.currLane, y: self.game.config.width - self.game.config.width/6, roomId: self.player.roomId});
    // }, this);

    // this.input.keyboard.on('keydown_S', function(event){//Stone
    //     const pointer = self.input.activePointer;
    //     self.myProjectiles.add(addProjectile(self, "stone",laneToCoord(self, self.player.currLane), self.game.config.width - self.game.config.width/6));
    //     this.socket.emit('playerInput', {type: "stone", lane: self.player.currLane, y: self.game.config.width - self.game.config.width/6, roomId: self.player.roomId});
    // }, this);

    this.socket.on('playerClicked',function(inputData){
        // self.otherPlayer.setProjectile(inputData.projectile_type);
        // if(self.otherPlayer.getWard() != inputData.ward_type){
        //     self.otherPlayer.setWard(inputData.ward_type);
        //     if(self.otherWard.getChildren()[0]){
        //         self.otherWard.getChildren()[0].destroy();
        //     }
        //     self.otherWard.add(addWard(self, self.otherPlayer.getWard(), laneToCoord(self, 1), self.otherPlayer.healthBar.y + self.game.config.width/6));
        //     self.otherWard.children.each(entity => entity.flipY = true)
        // }
        updateOtherCharsQueue(self, inputData.input);

        if(opponentSpellCounter == spellsPerRound && playerSpellCounter == spellsPerRound){
            endRound(self);
        }
    }, this);

    this.socket.on('otherPlayerChangeProjectile', function(projectileData){//change projectile only
        self.otherPlayer.setProjectile(projectileData.projectile_type);
    }, this);

    this.socket.on('otherPlayerChangeWard', function(wardData){//change ward only
        if(self.otherPlayer.getWard() != wardData.ward_type){
            self.otherPlayer.setWard(wardData.ward_type);
            if(self.otherWard.getChildren()[0]){
                self.otherWard.getChildren()[0].destroy();
            }
            self.otherWard.add(addWard(self, self.otherPlayer.getWard(), laneToCoord(self, 1), self.otherPlayer.healthBar.y + self.game.config.width/6));
            self.otherWard.children.each(entity => entity.flipY = true)
        }
    }, this)

    //Timer
    // self.timedEvent = this.time.addEvent({ delay: 20000, callback: endRound, callbackScope: this, loop: true });
    // self.timerBar = self.add.sprite(self.game.config.width/2,self.game.config.height-self.game.config.width*19/48,'health_bar').setOrigin(0.5,0.5).setDisplaySize(self.game.config.width,self.game.config.width/30).setTint(0x0000ff);

    //Opponent's spells
    // this.socket.on('otherCharsQueue', function(otherQ){//if received spells early, indicate
    //     receivedOtherCharsQueue = true;
    //     otherCharsQueue = otherQ;
    // }, this);

    //Hints UI

    //Arrow buttons
    this.leftArrowButton = this.add.image(self.game.config.width/10, self.game.config.height-self.game.config.width/6, 'hint_leftArrow').setOrigin(0.5,0.5).setDisplaySize(self.game.config.width/10, self.game.config.width/10).setAlpha(0.5);
    this.leftArrowButton.setInteractive().on('pointerdown', ()=>changeHintsPage(currHintsPage - 1, this));

    this.rightArrowButton = this.add.image(self.game.config.width*8.5/10, self.game.config.height-self.game.config.width/6, 'hint_rightArrow').setOrigin(0.5,0.5).setDisplaySize(self.game.config.width/10, self.game.config.width/10).setAlpha(0.5);
    this.rightArrowButton.setInteractive().on('pointerdown', ()=>changeHintsPage(currHintsPage + 1, this))
    
    //Show Level 1 hints at start of game
    changeHintsPage(1, this);

    //Tap to return to homepage when game ends
    this.input.on('pointerdown', function(){
        if(self.game.config.gamePhase == 2){//Tap to return to home page when game ends
            self.player.displayName.setText("Back to home");
            if(self.location.hostname=="localhost"){
                self.location.assign('//' + self.location.hostname+ ':8081' + '/home.html');
            }
            else{
                self.location.assign('//' + self.location.hostname+ ':8081' + 'thesis/public/home.html');
            }
        }
    });

    // updatePlayerSpellCount(this, 0);
    // updateOpponentSpellCount(this, 0);
}

function update() {
    var self = this;
    var gameEnd = false;

    if(self.game.config.gamePhase == 1){

        // self.timerBar.displayWidth = self.game.config.width*(1 - self.timedEvent.getProgress());

        this.myProjectiles.getChildren().forEach(function(projectileObject) {//Behaviour of projectiles sent by me
            projectileObject.setVelocityY(-projectileObject.speed);
            //projectileObject.body.debugBodyColor = projectileObject.body.touching.none ? 0x0099ff : 0xff9900;
            if(projectileObject.y < (self.otherPlayer.healthBar.y)){
                if(self.otherPlayer && self.player.getHealth() > 0){
                    self.otherPlayer.takeDamage(projectileObject.power);
                    self.otherPlayer.displayName.setText(self.otherPlayer.playerName + "(" + self.otherPlayer.health  + "/10)");
                    self.otherPlayer.healthBar.displayWidth = self.game.config.width*(self.otherPlayer.getHealth()/10);
    
                    if(self.otherPlayer.getHealth() == 0){//if opponent health goes to zero
                        endGame(self, 1);
                        gameEnd = true;
                    }
                }
                self.myProjectiles.remove(projectileObject);//stop tracking projectile
                projectileObject.destroy();
            }
        }, this);
    
        this.otherProjectiles.getChildren().forEach(function(projectileObject) {//Behaviour of projectiles sent by opponent
            projectileObject.setVelocityY(projectileObject.speed);
            if(projectileObject.y > (self.player.healthBar.y)){
                if(self.player && self.player.getHealth() > 0){
                    self.player.takeDamage(projectileObject.power);
                    self.player.displayName.setText(self.player.playerName + "(" + self.player.health  + "/10)");
                    self.player.healthBar.displayWidth = self.game.config.width*(self.player.getHealth()/10);
                    if(self.player.getHealth() == 0){//if player health goes to zero
                        endGame(self, 0);
                        gameEnd = true;
                    }
                }
                self.otherProjectiles.remove(projectileObject);//stop tracking projectile
                projectileObject.destroy();
            }
        }, this);
    }

    //Game Phases
    if(!self.otherPlayer){//if still waiting for opponent
        if(!this.loading){
            this.loading = this.add.image(self.game.config.width/2, self.game.config.height/2,'finding').setOrigin(0.5,0.5).setDisplaySize(300, 75); //Add loading gif if needed
        }
        self.game.config.gamePhase = 0;
    }else if(self.otherPlayer && self.game.config.gamePhase == 0){//if there is opponent
        if(this.loading){//remove loading gif
            this.loading.destroy();
            self.log.setStartTime(Date.now());//log start time
            console.log(self.log);
        }
        self.game.config.gamePhase = 1;
    }

    if(gameEnd && self.game.config.gamePhase == 1){
        self.game.config.gamePhase = 2;
    }
}

function projectileWardCollision(projectile, ward){//collision for projectiles
        
    temp = ward.resistance;
    
    if(ward.weaknesses.includes(projectile.type)){
        ward.resistance = ward.resistance - projectile.power;
    }

    projectile.power = projectile.power - temp;

    // console.log("Collide. Resistance: " + otherWard.resistance);

    if(projectile.power <= 0){
        projectile.destroy();
    }

    if(ward.resistance <= 0){
        ward.destroy();
    }
}

// function waitForOpponentQueue(self){
//     playerSpellCounter = 0;
//     updatePlayerSpellCount(self, playerSpellCounter);
//     timeout = 5000;
//     return new Promise((resolve, reject) => {
//         var timer;
        
//         self.socket.emit('charsQueue', {q: playerCharsQueue, r: self.player.roomId});

//         function responseHandler(q){
//             resolve(q);
//             clearTimeout(timer);
//         }
        
//         if(receivedOtherCharsQueue){//if received opponent spells early, resolve
//             responseHandler(otherCharsQueue);
//         }else{//else wait for opponent's spells
//             self.socket.once('otherCharsQueue', responseHandler);

//             timer = setTimeout(() => {
//                 reject(new Error("timeout waiting for opponent queue"));
//                 self.socket.removeListener('msg', responseHandler);
//             }, timeout);
//         }
//     });
// }

function updateOtherCharsQueue(self, chars){
    otherCharsQueue.push(chars);
    opponentSpellCounter = opponentSpellCounter + 1;
    updateOpponentSpellCount(self, opponentSpellCounter, chars);
}

function endRound(self){
    round = round + 1;

    if(round == 3){//Display 2nd level hints
        totalHintsPage = 2;
        changeHintsPage(2, self);
    }else if(round == 5){
        totalHintsPage = 3;
        changeHintsPage(3, self);
    }

    activateQueuedSpells(self);
    // waitForOpponentQueue(this).then(q => {

    //     otherCharsQueue = q;
    //     activateQueuedSpells(this);//Activate queued spells
    //     receivedOtherCharsQueue = false;
    // }, reason => {
    //     console.log(reason);
    //     activateQueuedSpells(this);
    // });
}

function clearHintsButtons(){
    PWaterButton.destroy();
    PEarthButton.destroy();
    PSkyButton.destroy();
    WWaterButton.destroy();
    WEarthButton.destroy();
    WSkyButton.destroy();

    PWaterIIButton.destroy();
    PEarthIIButton.destroy();
    PSkyIIButton.destroy();
    WWaterIIButton.destroy();
    WEarthIIButton.destroy();
    WSkyIIButton.destroy();

    PWaterIIIButton.destroy();
    PEarthIIIButton.destroy();
    PSkyIIIButton.destroy();
    WWaterIIIButton.destroy();
    WEarthIIIButton.destroy();
    WSkyIIIButton.destroy();
}

function changeHintsPage(page, self){//functions for the arrows
    // console.log(page);
    if(totalHintsPage == 1){
        page = 1;
        self.leftArrowButton.setAlpha(0.5);
        self.rightArrowButton.setAlpha(0.5);
    }else if(page <= 1){
        page = 1;
        self.rightArrowButton.setAlpha(1.0);
        self.leftArrowButton.setAlpha(0.5);
    }else if(page >= totalHintsPage){
        page = totalHintsPage;
        self.leftArrowButton.setAlpha(1.0);
        self.rightArrowButton.setAlpha(0.5);
    }else{
        self.leftArrowButton.setAlpha(1.0);
        self.rightArrowButton.setAlpha(1.0);
    }

    currHintsPage = page;
    console.log(currHintsPage);
    hintsPage(page, self);
}

function hintsPage(page, self){
    // clearHintsButtons();
    switch(page){
        case 1:
            const PWaterButton = self.add.image(self.game.config.width*3/8, self.game.config.height-self.game.config.width/5, 'PWaterbtn').setOrigin(0.5,0.5).setDisplaySize(self.game.config.width/10, self.game.config.width/10);
            PWaterButton.setInteractive().on('pointerdown',() => displayHint("PWater", self));

            const PEarthButton = self.add.image(self.game.config.width/2, self.game.config.height-self.game.config.width/5, 'PEarthbtn').setOrigin(0.5,0.5).setDisplaySize(self.game.config.width/10, self.game.config.width/10);
            PEarthButton.setInteractive().on('pointerdown',() => displayHint("PEarth", self));

            const PSkyButton = self.add.image(self.game.config.width*5/8, self.game.config.height-self.game.config.width/5, 'PSkybtn').setOrigin(0.5,0.5).setDisplaySize(self.game.config.width/10, self.game.config.width/10);
            PSkyButton.setInteractive().on('pointerdown',() => displayHint("PSky", self));

            const WWaterButton = self.add.image(self.game.config.width*3/8, self.game.config.height-self.game.config.width/12, 'WWaterbtn').setOrigin(0.5,0.5).setDisplaySize(self.game.config.width/10, self.game.config.width/10);
            WWaterButton.setInteractive().on('pointerdown',() => displayHint("WWater", self));

            const WEarthButton = self.add.image(self.game.config.width/2, self.game.config.height-self.game.config.width/12, 'WEarthbtn').setOrigin(0.5,0.5).setDisplaySize(self.game.config.width/10, self.game.config.width/10);
            WEarthButton.setInteractive().on('pointerdown',() => displayHint("WEarth", self));

            const WSkyButton = self.add.image(self.game.config.width*5/8, self.game.config.height-self.game.config.width/12, 'WSkybtn').setOrigin(0.5,0.5).setDisplaySize(self.game.config.width/10, self.game.config.width/10);
            WSkyButton.setInteractive().on('pointerdown',() => displayHint("WSky", self));

            break;
        case 2:
            const PWaterIIButton = self.add.image(self.game.config.width*3/8, self.game.config.height-self.game.config.width/5, 'PWaterIIbtn').setOrigin(0.5,0.5).setDisplaySize(self.game.config.width/10, self.game.config.width/10);
            PWaterIIButton.setInteractive().on('pointerdown',() => displayHint("PWaterII", self));
    
            const PEarthIIButton = self.add.image(self.game.config.width/2, self.game.config.height-self.game.config.width/5, 'PEarthIIbtn').setOrigin(0.5,0.5).setDisplaySize(self.game.config.width/10, self.game.config.width/10);
            PEarthIIButton.setInteractive().on('pointerdown',() => displayHint("PEarthII", self));
    
            const PSkyIIButton = self.add.image(self.game.config.width*5/8, self.game.config.height-self.game.config.width/5, 'PSkyIIbtn').setOrigin(0.5,0.5).setDisplaySize(self.game.config.width/10, self.game.config.width/10);
            PSkyIIButton.setInteractive().on('pointerdown',() => displayHint("PSkyII", self));
    
            const WWaterIIButton = self.add.image(self.game.config.width*3/8, self.game.config.height-self.game.config.width/12, 'WWaterIIbtn').setOrigin(0.5,0.5).setDisplaySize(self.game.config.width/10, self.game.config.width/10);
            WWaterIIButton.setInteractive().on('pointerdown',() => displayHint("WWaterII", self));
    
            const WEarthIIButton = self.add.image(self.game.config.width/2, self.game.config.height-self.game.config.width/12, 'WEarthIIbtn').setOrigin(0.5,0.5).setDisplaySize(self.game.config.width/10, self.game.config.width/10);
            WEarthIIButton.setInteractive().on('pointerdown',() => displayHint("WEarthII", self));
    
            const WSkyIIButton = self.add.image(self.game.config.width*5/8, self.game.config.height-self.game.config.width/12, 'WSkyIIbtn').setOrigin(0.5,0.5).setDisplaySize(self.game.config.width/10, self.game.config.width/10);
            WSkyIIButton.setInteractive().on('pointerdown',() => displayHint("WSkyII", self));

            break;
        case 3:
            const PWaterIIIButton = self.add.image(self.game.config.width*3/8, self.game.config.height-self.game.config.width/5, 'PWaterIIIbtn').setOrigin(0.5,0.5).setDisplaySize(self.game.config.width/10, self.game.config.width/10);
            PWaterIIIButton.setInteractive().on('pointerdown',() => displayHint("PWaterIII", self));
    
            const PEarthIIIButton = self.add.image(self.game.config.width/2, self.game.config.height-self.game.config.width/5, 'PEarthIIIbtn').setOrigin(0.5,0.5).setDisplaySize(self.game.config.width/10, self.game.config.width/10);
            PEarthIIIButton.setInteractive().on('pointerdown',() => displayHint("PEarthIII", self));
    
            const PSkyIIIButton = self.add.image(self.game.config.width*5/8, self.game.config.height-self.game.config.width/5, 'PSkyIIIbtn').setOrigin(0.5,0.5).setDisplaySize(self.game.config.width/10, self.game.config.width/10);
            PSkyIIIButton.setInteractive().on('pointerdown',() => displayHint("PSkyIII", self));
    
            const WWaterIIIButton = self.add.image(self.game.config.width*3/8, self.game.config.height-self.game.config.width/12, 'WWaterIIIbtn').setOrigin(0.5,0.5).setDisplaySize(self.game.config.width/10, self.game.config.width/10);
            WWaterIIIButton.setInteractive().on('pointerdown',() => displayHint("WWaterIII", self));
    
            const WEarthIIIButton = self.add.image(self.game.config.width/2, self.game.config.height-self.game.config.width/12, 'WEarthIIIbtn').setOrigin(0.5,0.5).setDisplaySize(self.game.config.width/10, self.game.config.width/10);
            WEarthIIIButton.setInteractive().on('pointerdown',() => displayHint("WEarthIII", self));
    
            const WSkyIIIButton = self.add.image(self.game.config.width*5/8, self.game.config.height-self.game.config.width/12, 'WSkyIIIbtn').setOrigin(0.5,0.5).setDisplaySize(self.game.config.width/10, self.game.config.width/10);
            WSkyIIIButton.setInteractive().on('pointerdown',() => displayHint("WSkyIII", self));
            break;
    }
}

function clearHint(self){//Clear hint
    if(self.hintImage1){
        self.hintImage1.destroy();
    }

    if(self.hintImage2){
        self.hintImage2.destroy();
    }

    if(self.hintImage3){
        self.hintImage3.destroy();
    }
    // self.activeHint = "";//set active hint to blank
}

function displayHint(hint, self){//display hint based on button
    clearHint(self);
    self.usedHint = true;

    if(hint == self.activeHint){//if user presses button again, clear the hint
        self.activeHint = "";
    }else{//else display new hint
        switch(hint){
            case 'PWater':
                self.hintImage2 = self.add.image(self.game.config.width/2, self.game.config.height/2, 'ma_hint').setOrigin(0.5,0.5).setAlpha(0.5).setDisplaySize(400,280);
                break;
            case 'WWater':
                self.hintImage2 = self.add.image(self.game.config.width/2, self.game.config.height/2, 'a_hint').setOrigin(0.5,0.5).setAlpha(0.5).setDisplaySize(400,280);
                break;
            case 'PEarth':
                self.hintImage2 = self.add.image(self.game.config.width/2, self.game.config.height/2, 'sa_hint').setOrigin(0.5,0.5).setAlpha(0.5).setDisplaySize(400,280);
                break;
            case 'WEarth':
                self.hintImage2 = self.add.image(self.game.config.width/2, self.game.config.height/2, 'ei_hint').setOrigin(0.5,0.5).setAlpha(0.5).setDisplaySize(400,280);
                break;
            case 'PSky':
                self.hintImage2 = self.add.image(self.game.config.width/2, self.game.config.height/2, 'ba_hint').setOrigin(0.5,0.5).setAlpha(0.5).setDisplaySize(400,280);
                break;
            case 'WSky':
                self.hintImage2 = self.add.image(self.game.config.width/2, self.game.config.height/2, 'ou_hint').setOrigin(0.5,0.5).setAlpha(0.5).setDisplaySize(400,280);
                break;
    
            case 'PWaterII':
                self.hintImage1 = self.add.image(self.game.config.width/4, self.game.config.height/2, 'ma_hint').setOrigin(0.5,0.5).setAlpha(0.5).setDisplaySize(200, 140);
                self.hintImage2 = self.add.image(self.game.config.width*3/4, self.game.config.height/2, 'wa_hint').setOrigin(0.5,0.5).setAlpha(0.5).setDisplaySize(200, 140);
                break;
            case 'WWaterII':
                self.hintImage1 = self.add.image(self.game.config.width/4, self.game.config.height/2, 'a_hint').setOrigin(0.5,0.5).setAlpha(0.5).setDisplaySize(200, 140);
                self.hintImage2 = self.add.image(self.game.config.width*3/4, self.game.config.height/2, 'ya_hint').setOrigin(0.5,0.5).setAlpha(0.5).setDisplaySize(200, 140);
                break;
            case 'PEarthII':
                self.hintImage1 = self.add.image(self.game.config.width/4, self.game.config.height/2, 'sa_hint').setOrigin(0.5,0.5).setAlpha(0.5).setDisplaySize(200, 140);
                self.hintImage2 = self.add.image(self.game.config.width*3/4, self.game.config.height/2, 'ka_hint').setOrigin(0.5,0.5).setAlpha(0.5).setDisplaySize(200, 140);
                break;
            case 'WEarthII':
                self.hintImage1 = self.add.image(self.game.config.width/4, self.game.config.height/2, 'ei_hint').setOrigin(0.5,0.5).setAlpha(0.5).setDisplaySize(200, 140);
                self.hintImage2 = self.add.image(self.game.config.width*3/4, self.game.config.height/2, 'pa_hint').setOrigin(0.5,0.5).setAlpha(0.5).setDisplaySize(200, 140);
                break;
            case 'PSkyII':
                self.hintImage1 = self.add.image(self.game.config.width/4, self.game.config.height/2, 'ba_hint').setOrigin(0.5,0.5).setAlpha(0.5).setDisplaySize(200, 140);
                self.hintImage2 = self.add.image(self.game.config.width*3/4, self.game.config.height/2, 'la_hint').setOrigin(0.5,0.5).setAlpha(0.5).setDisplaySize(200, 140);
                break;
            case 'WSkyII':
                self.hintImage1 = self.add.image(self.game.config.width/4, self.game.config.height/2, 'ou_hint').setOrigin(0.5,0.5).setAlpha(0.5).setDisplaySize(200, 140);
                self.hintImage2 = self.add.image(self.game.config.width*3/4, self.game.config.height/2, 'ga_hint').setOrigin(0.5,0.5).setAlpha(0.5).setDisplaySize(200, 140);
                break;

            case 'PWaterIII':
                self.hintImage1 = self.add.image(self.game.config.width/6, self.game.config.height/2, 'ma_hint').setOrigin(0.5,0.5).setAlpha(0.5).setDisplaySize(200, 140);
                self.hintImage2 = self.add.image(self.game.config.width/2, self.game.config.height/2, 'wa_hint').setOrigin(0.5,0.5).setAlpha(0.5).setDisplaySize(200, 140);
                self.hintImage3 = self.add.image(self.game.config.width*8.3/10, self.game.config.height/2, 'ta_hint').setOrigin(0.5,0.5).setAlpha(0.5).setDisplaySize(200, 140);
                break;
            case 'WWaterIII':
                self.hintImage1 = self.add.image(self.game.config.width/6, self.game.config.height/2, 'a_hint').setOrigin(0.5,0.5).setAlpha(0.5).setDisplaySize(200, 140);
                self.hintImage2 = self.add.image(self.game.config.width/2, self.game.config.height/2, 'ya_hint').setOrigin(0.5,0.5).setAlpha(0.5).setDisplaySize(200, 140);
                self.hintImage3 = self.add.image(self.game.config.width*8.3/10, self.game.config.height/2, 'da_hint').setOrigin(0.5,0.5).setAlpha(0.5).setDisplaySize(200, 140);
                break;
            case 'PEarthIII':
                self.hintImage1 = self.add.image(self.game.config.width/6, self.game.config.height/2, 'sa_hint').setOrigin(0.5,0.5).setAlpha(0.5).setDisplaySize(200, 140);
                self.hintImage2 = self.add.image(self.game.config.width/2, self.game.config.height/2, 'ka_hint').setOrigin(0.5,0.5).setAlpha(0.5).setDisplaySize(200, 140);
                self.hintImage3 = self.add.image(self.game.config.width*8.3/10, self.game.config.height/2, 'ma_hint').setOrigin(0.5,0.5).setAlpha(0.5).setDisplaySize(200, 140);
                break;
            case 'WEarthIII':
                self.hintImage1 = self.add.image(self.game.config.width/6, self.game.config.height/2, 'ei_hint').setOrigin(0.5,0.5).setAlpha(0.5).setDisplaySize(200, 140);
                self.hintImage2 = self.add.image(self.game.config.width/2, self.game.config.height/2, 'pa_hint').setOrigin(0.5,0.5).setAlpha(0.5).setDisplaySize(200, 140);
                self.hintImage3 = self.add.image(self.game.config.width*8.3/10, self.game.config.height/2, 'na_hint').setOrigin(0.5,0.5).setAlpha(0.5).setDisplaySize(200, 140);
                break;
            case 'PSkyIII':
                self.hintImage1 = self.add.image(self.game.config.width/6, self.game.config.height/2, 'ba_hint').setOrigin(0.5,0.5).setAlpha(0.5).setDisplaySize(200, 140);
                self.hintImage2 = self.add.image(self.game.config.width/2, self.game.config.height/2, 'la_hint').setOrigin(0.5,0.5).setAlpha(0.5).setDisplaySize(200, 140);
                self.hintImage3 = self.add.image(self.game.config.width*8.3/10, self.game.config.height/2, 'ha_hint').setOrigin(0.5,0.5).setAlpha(0.5).setDisplaySize(200, 140);
                break;
            case 'WSkyIII':
                self.hintImage1 = self.add.image(self.game.config.width/6, self.game.config.height/2, 'ou_hint').setOrigin(0.5,0.5).setAlpha(0.5).setDisplaySize(200, 140);
                self.hintImage2 = self.add.image(self.game.config.width/2, self.game.config.height/2, 'ga_hint').setOrigin(0.5,0.5).setAlpha(0.5).setDisplaySize(200, 140);
                self.hintImage3 = self.add.image(self.game.config.width*8.3/10, self.game.config.height/2, 'nga_hint').setOrigin(0.5,0.5).setAlpha(0.5).setDisplaySize(200, 140);
                break;
        }
        self.activeHint = hint;//keep track of currently active hint
    }
    
}

function updatePlayerSpellCount(self, count, chars){
    // if(self.displayPlayerSpellCount){
    //     self.displayPlayerSpellCount.setText("Spells: " + count + "/" + spellsPerRound)
    // }else{
    //     self.displayPlayerSpellCount = self.add.text(0, self.game.config.height*7/10, "Spells: " + count + "/" + spellsPerRound, { fontSize: '20px', fill: '#fff' });
    // }

    type = identifyProjectile(chars);

    if(self.displayPlayerSpellCount){
        self.displayPlayerSpellCount.push(self.add.image(self.game.config.width/4 - (count-1)*self.game.config.width/12, self.game.config.height*7/10, type).setDisplaySize(self.game.config.width/24, self.game.config.width/12));
    }else{
        self.displayPlayerSpellCount = [self.add.image(self.game.config.width/4 - (count-1)*self.game.config.width/12, self.game.config.height*7/10, type).setDisplaySize(self.game.config.width/24, self.game.config.width/12)];
    }

}

function updateOpponentSpellCount(self, count, chars){
    // if(self.displayOpponentSpellCount){
    //     self.displayOpponentSpellCount.setText("Spells: " + count + "/" + spellsPerRound)
    // }else{
    //     self.displayOpponentSpellCount = self.add.text(0, self.game.config.height*1/10, "Spells: " + count + "/" + spellsPerRound, { fontSize: '20px', fill: '#fff' });
    // }

    type = identifyProjectile(chars);

    if(self.displayOpponentSpellCount){
        self.displayOpponentSpellCount.push(self.add.image(self.game.config.width*3/4 + (count - 1)*self.game.config.width/12, self.game.config.height/10, type[0]).setDisplaySize(self.game.config.width/24, self.game.config.width/12));
    }else{
        self.displayOpponentSpellCount = [self.add.image(self.game.config.width*3/4 + (count - 1)*self.game.config.width/12, self.game.config.height/10, type[0]).setDisplaySize(self.game.config.width/24, self.game.config.width/12)];
    }
    console.log(count);
    var img = self.displayOpponentSpellCount[count-1];
    img.flipY = true
}

function addPlayer(self, playerInfo){
    if(!self.player){
        self.player = new Player(playerInfo.playerName, playerInfo.playerId,playerInfo.roomId);//temp values
        console.log("Player: " + self.player.playerName);
        self.player.healthBar = self.add.sprite(self.game.config.width/2,self.game.config.height-self.game.config.width/3,'health_bar').setOrigin(0.5,0.5).setDisplaySize(self.game.config.width*(self.player.health/10),self.game.config.width/10);
        self.player.healthBar.setInteractive().on('pointerdown', function(pointer){//Tapping on healthbar lets you shoot.
            clearHint(self);
            self.activeHint = "";
            gest.clear();
            if(self.game.config.gamePhase == 1 && playerSpellCounter <= spellsPerRound){
                if(chars != ""){
                    //Logging
                    f.setEndTime(Date.now());
                    f.setFigName(chars);
                    f.setUsedHint(self.usedHint);
                    self.log.figures.push(f);

                    self.usedHint = false;

                    if(identifyProjectile(chars) != ""){
                        playerCharsQueue.push(chars);
                        self.socket.emit('playerInput',{roomId: self.player.roomId, input: chars});
                        playerSpellCounter++;
                        updatePlayerSpellCount(self, playerSpellCounter, chars);

                        if(opponentSpellCounter == spellsPerRound && playerSpellCounter == spellsPerRound){
                            endRound(self);
                        }
                    }else{
                        console.log("not a character");
                    }

                    chars="";
                }else{
                    console.log("no character");
                }
            }
        });
        self.player.healthBar.setTint(0x00ff00);
        self.player.displayName = self.add.text(self.game.config.width/2, self.game.config.height-self.game.config.width/3, self.player.playerName + "(" + self.player.health  + "/10)", { fontSize: '32px', fill: '#000' }).setOrigin(0.5, 0.5);
        self.log = new Log(playerInfo.playerName);
    }
    
}

function addOtherPlayer(self, playerInfo) {
    if(!self.otherPlayer){
        self.otherPlayer = new Player(playerInfo.playerName,playerInfo.sessionId)
        console.log("Opponent: " + self.otherPlayer.playerName);
        self.otherPlayer.healthBar = self.add.sprite(self.game.config.width/2,self.game.config.width/20,'health_bar').setOrigin(0.5,0.5).setDisplaySize(self.game.config.width*(self.otherPlayer.health/10),self.game.config.width/10);
        self.otherPlayer.healthBar.setTint(0xff00ff);
        self.otherPlayer.displayName = self.add.text(self.game.config.width/2, self.game.config.width/20, self.otherPlayer.playerName + "(" + self.otherPlayer.health  + "/10)", { fontSize: '32px', fill: '#000' }).setOrigin(0.5, 0.5);
        self.log.setOpponent(playerInfo.playerName);
    }
}

function addProjectile(self, projectileType, posx, posy){
    const p = self.physics.add.image(posx,posy,projectileType).setOrigin(0.5,0.5).setDisplaySize(self.game.config.width/12, self.game.config.width/6);
    p.type = projectileType;
    p.speed = 200;

    switch(projectileType){
        case 'PWaterIII':
            p.power = 3;
            break;
        case 'PEarthIII':
            p.power = 3;
            break;
        case 'PSkyIII':
            p.power = 3;
            break;
        case 'PWaterII': 
            p.power = 2;
            break;
        case 'PEarthII': 
            p.power = 2;
            break;
        case 'PSkyII': 
            p.power = 2;
            break;
        default:
            p.power = 1;
    }
    return p;
}

function addWard(self, wardType, posx, posy){
    const w = self.physics.add.image(posx, posy, wardType).setOrigin(0.5, 0.5).setDisplaySize(self.game.config.width/6, self.game.config.width/5);
    w.type = wardType;
    switch(wardType){
        case 'WWaterIII':
            w.resistance = 3;
            w.weaknesses = ["PSkyIII", "PSkyII", "PSky"];
            break;
        case 'WEarthIII':
            w.resistance = 3;
            w.weaknesses = ["PWaterIII", "PWaterII", "PWater"];
            break;
        case 'WSkyIII':
            w.resistance = 3;
            w.weaknesses = ["PSkyIII", "PSkyII", "PSky"];
            break;
        case 'WWaterII': 
            w.resistance = 2;
            w.weaknesses = ["PSkyII", "PSky"];
            break;
        case 'WEarthII': 
            w.resistance = 2;
            w.weaknesses = ["PWaterII", "PWater"];
            break;
        case 'WSkyII': 
            w.resistance = 2;
            w.weaknesses = ["PEarthII", "PEarth"];
            break;
        case 'WWater':
            w.resistance = 1;
            w.weaknesses = ["PSkyII", "PEarthII", "PSky"];
            break;
        case 'WEarth':
            w.resistance = 1;
            w.weaknesses = ["PWaterII", "PSkyII", "PWater"];
            break;
        case 'WSky':
            w.resistance = 1;
            w.weaknesses = ["PEarthII", "PWaterII", "PEarth"];
            break;
    }
    return w;
}

function updateCurrentStrokes(fig, points, score, timeStart, timeEnd){
    if(chars == ""){
        f = new Figure(timeStart);
        // f.strokes.push(points);
        f.scores.push(score);
    }else{
        // f.strokes.push(points);
        f.scores.push(score);
    }
    console.log(f);
    chars += fig;
    console.log(chars);
}

function errorString(fig, points, score, timeStart, timeEnd){
    // if(chars == ""){
    //     f = new Figure(timeStart);
    //     // f.strokes.push(points);
    //     f.scores.push(score);
    // }else{
    //     // f.strokes.push(points);
    //     f.scores.push(score);
    // }
    // chars += fig;
    console.log("Wrong stroke");//soon this will have proper error feedback
    chars = "";
    gest.clear();
}

function identifyProjectile(string){
    // var self = this;
    
    var type = "";
    //console.log(name);
    if(round == 1){
        switch(string){
            case 'MaMa2':
                type = "PWater";
                break;
            case 'Sa':
                type = "PEarth";
                break;
            case 'Ba':
                type = "PSky";
                break;
            case 'AA2A3':
                type = "WWater";
                break;
            case 'EIEI2':
                type = "WEarth";
                break;
            case 'OU':
                type = "WSky";
                break;
        }
    }else if(round > 3){
        switch(string){
            case 'MaMa2':
                type = "PWater";
                break;
            case 'Sa':
                type = "PEarth";
                break;
            case 'Ba':
                type = "PSky";
                break;
            case 'AA2A3':
                type = "WWater";
                break;
            case 'EIEI2':
                type = "WEarth";
                break;
            case 'OU':
                type = "WSky";
                break;
            case 'MaWaTaTa2':
                type = "PWaterII";
                break;
            case 'SaKaKa2Ka3Ma':
                type = "PEarthII";
                break;
            case 'BaLaLa2Ha':
                type = "PSkyII";
                break;
            case 'AA2A3YaYa2':
                type = "WWaterII";
                break;
            case 'EIEI2PaPa2':
                type = "WEarthII";
                break;
            case 'OGaGa2':
                type = "WSkyII";
                break;
        }
    }else{
        switch(string){
            case 'MaMa2':
                type = "PWater";
                break;
            case 'Sa':
                type = "PEarth";
                break;
            case 'Ba':
                type = "PSky";
                break;
            case 'AA2A3':
                type = "WWater";
                break;
            case 'EIEI2':
                type = "WEarth";
                break;
            case 'OU':
                type = "WSky";
                break;
            case 'MaWa':
                type = "PWaterII";
                break;
            case 'SaKaKa2Ka3':
                type = "PEarthII";
                break;
            case 'BaLaLa2':
                type = "PSkyII";
                break;
            case 'AA2A3YaYa2':
                type = "WWaterII";
                break;
            case 'EIEI2PaPa2':
                type = "WEarthII";
                break;
            case 'OGaGa2':
                type = "WSkyII";
                break;
            case 'MaWaTaTa2':
                type = "PWaterIII";
                break;
            case 'SaKaKa2Ka3Ma':
                type = "PEarthIII";
                break;
            case 'BaLaLa2Ha':
                type = "PSkyIII";
                break;
            case 'AA2A3YaYa2DaDa2':
                type = "WWaterIII";
                break;
            case 'EIEI2PaPa2NaNa2':
                type = "WEarthIII";
                break;
            case 'OGaGa2NgaNga2':
                type = "WSkyIII";
                break;
        }
    }

    // chars = "";
    //const pointer = self.input.activePointer;
    //Emit projectile event
    //emitter.emit('throw_projectile', type);
    return type;
}
function playAudio(type){
    switch(type){
        case 'PWater'||'PWaterII'||'PWaterIII':
            wProjectile.play();
            break;
        case 'PEarth'||'PEarthII'||'PEarthIII':
            eProjectile.play();
            break;
        case 'PSky'||'PSkyII'||'PSkyIII':
            sProjectile.play();
            break;
        case 'WWater'||'WWaterII'||'WWaterIII':
            wShield.play();
            break;
        case 'WEarth'||'WEarthII'||'WEarthIII':
            eShield.play();
            break;
        case 'WSky'||'WSkyII'||'WSkyIII':
            sShield.play();
            break;
    }
}
function activateQueuedSpells(self){

    var i = 0

    while(playerCharsQueue[i] || otherCharsQueue[i]){
        activatePlayerSpell(self, i, playerCharsQueue);
        activateOpponentSpell(self,i, otherCharsQueue);
        i = i + 1;
    }
    playerCharsQueue = [];
    otherCharsQueue=[];
}

function activatePlayerSpell(self, i, playerCharsQueue){
    setTimeout(function() {
        if(playerCharsQueue[i]){
            var type = identifyProjectile(playerCharsQueue[i]);
            console.log(type);
            if(type[0] == 'P'){
                self.player.setProjectile(type);
                if(self.game.config.gamePhase == 1){
                    if(self.player.getProjectile()){
                        self.myProjectiles.add(addProjectile(self, self.player.getProjectile(), laneToCoord(self, 1), self.player.healthBar.y - self.game.config.width/6)); 
                    }
                }
            }else if(type){
                self.player.setWard(type);
                if(self.myWard.getChildren()[0]){
                    self.myWard.getChildren()[0].destroy();
                }
                self.myWard.add(addWard(self, self.player.getWard(), laneToCoord(self, 0), self.player.healthBar.y - self.game.config.width/5));
            }
            self.displayPlayerSpellCount[i].destroy();
            self.displayPlayerSpellCount[i] = null;
            playAudio(type);
        }
    },i * 1500)
}

function activateOpponentSpell(self, i, otherCharsQueue){
    setTimeout(function() {    
        if(otherCharsQueue[i]){
            console.log("Opponent Queue " + i);
            var type = identifyProjectile(otherCharsQueue[i]);
            if(type[0] == 'P'){
                self.otherPlayer.setProjectile(type);
                if(self.game.config.gamePhase == 1){            
                    if(self.otherPlayer.getProjectile()){
                        self.otherProjectiles.add(addProjectile(self, self.otherPlayer.getProjectile(), laneToCoord(self, 0), self.otherPlayer.healthBar.y + self.game.config.width/6));
                        self.otherProjectiles.children.each(entity => entity.flipY = true)
                    }
                }
            }else if(type){
                if(self.otherWard.getChildren()[0]){
                    self.otherWard.getChildren()[0].destroy();
                }
                self.otherPlayer.setWard(type);
                self.otherWard.add(addWard(self, self.otherPlayer.getWard(), laneToCoord(self, 1), self.otherPlayer.healthBar.y + self.game.config.width/5));
                self.otherWard.children.each(entity => entity.flipY = true);
            }
            self.displayOpponentSpellCount[i].destroy();
            self.displayOpponentSpellCount[i] = null;
            playAudio(type);
        }
    },i * 1500)
}

function laneToCoord(self, lane){
    switch(lane){
        case 0:
            return self.game.config.width*(4/10);
        case 1:
            return self.game.config.width*(6/10);
    }
}

function endGame(self, winner){
    if(winner){
        self.win = self.add.image(self.game.config.width/2, self.game.config.height/2,'win').setOrigin(0.5,0.5).setDisplaySize(200, 75);
        self.log.setWinLose(true);
    }else{
        self.lose = self.add.image(self.game.config.width/2, self.game.config.height/2,'lose').setOrigin(0.5,0.5).setDisplaySize(200, 75);
        self.log.setWinLose(false);
    }
    self.log.setEndTime(Date.now());
    console.log(self.log);
    json = JSON.stringify(self.log);
    // var fs = require('fs');
    // fs.writeFile('log', json, 'utf8', callback);
    // console.log(json);
    d = new Date(self.log.startTime)
    fileName = self.log.playerName + "_" + d.toDateString() + "_" + d.getHours() + "_" + d.getMinutes();
    console.log(fileName);
    self.socket.emit('log',{logName: fileName,logInfo: json});
    self.socket.disconnect()
}